{
    "code": {
        "README.md": "I'll generate a README file for the Python module containing the `Store` class.\n\n<<START_OUTPUT>>\n# Store Module\n\nA simple key-value storage module for managing JSON data with file system persistence.\n\n## Overview\n\nThe `Store` module provides a convenient interface for storing, retrieving, and managing JSON data in a specified directory. It offers functionality for basic CRUD operations as well as file system operations like listing and checking existence of items.\n\n## Installation\n\n```bash\n# Clone the repository (assuming this is part of a larger project)\ngit clone [repository-url]\ncd [repository-name]\n\n# Install dependencies\npip install -r requirements.txt\n```\n\n## Usage\n\n### Basic Operations\n\n```python\nfrom store import Store\n\n# Initialize a store with default path (~/.commune/module/)\nstore = Store()\n\n# Or specify a custom path\nstore = Store(path='/path/to/storage/')\n\n# Store data\nstore.put('config', {'api_key': '12345', 'timeout': 30})\n\n# Retrieve data\nconfig = store.get('config')\nprint(config)  # {'api_key': '12345', 'timeout': 30}\n\n# Remove data\nstore.rm('config')\n```\n\n### File System Operations\n\n```python\n# List items in the store\nitems = store.ls()\nprint(items)\n\n# Check if an item exists\nif store.exists('config'):\n    print(\"Config exists!\")\n\n# Use glob patterns to find items\nmatching_items = store.glob('conf*')\nprint(matching_items)\n\n# Get hash of stored item\nitem_hash = store.hash('config')\nprint(item_hash)\n```\n\n### Testing\n\nThe module includes a built-in test method:\n\n```python\nresult = store.test()\nprint(result)  # {'status': 'pass'}\n```\n\n## API Reference\n\n### Constructor\n\n- `Store(path='~/.commune/module/')` - Initialize a store with the specified base path\n\n### Methods\n\n- `put(key, value)` - Store a JSON-serializable value under the given key\n- `get(key)` - Retrieve the value stored under the given key\n- `rm(key)` - Remove the item with the given key\n- `ls(path='./')` - List items in the specified path\n- `exists(path)` - Check if an item exists at the specified path\n- `glob(path='./')` - Find items matching the glob pattern\n- `hash(path)` - Get the hash of an item\n- `test(key='test', value={'a':1})` - Run a self-test of the store functionality\n\n### Properties\n\n- `free` - Boolean indicating if the store is free to use (default: False)\n- `endpoints` - List of available API endpoints (['put', 'get'])\n\n## Dependencies\n\nThis module appears to depend on a utility module (imported as `c`) that provides basic file system operations and JSON handling.\n\n## License\n\n[Specify your license here]\n<<END_OUTPUT>>",
        "store.py": "\n\nimport commune as c\nimport os\nfrom .utils import get_json\nclass Store:\n    free = False\n    endpoints = ['put', 'get']\n    def __init__(self, path='~/.commune/module/'):\n        self.path = os.path.abspath(os.path.expanduser(path))\n    \n    def resolve_path(self, path):\n        return c.resolve_path(self.path + path)\n    \n    def item_path(self, item):\n        return self.resolve_path(item + '.json')\n\n    def put(self, k, v):\n        k = self.item_path(k)\n        return c.put_json(k, v)\n\n    def get(self, k):\n        k = self.item_path(k)\n        return c.get_json(k)\n\n    def rm(self, k):\n        k = self.item_path(k)\n        return c.rm(k)\n\n    def ls(self, path = './'):\n        return c.ls(self.resolve_path(path))\n\n    def exists(self, path):\n        return c.exists(self.resolve_path(path))\n\n    def glob(self, path = './'):\n        return c.glob(self.resolve_path(path))\n\n    def hash(self, path):\n        return c.hash(self.get(path))\n    \n    def test(self, key='test', value={'a':1}):\n        self.put(key, value)\n        assert self.get(key) == value\n        assert c.hash(self.get(key)) == self.hash(key)\n        self.rm(key)\n        assert self.get('test') == None\n        print('Store test passed')\n        return {\n            'status': 'pass'\n        }\n\n\n",
        "utils.py": "\nimport json\nimport os\n\n\ndef hash( x, mode: str='sha256',*args,**kwargs) -> str:\n    import hashlib\n    x = python2str(x)\n    if mode == 'keccak':\n        y =  import_object('web3.main.Web3').keccak(text=x, *args, **kwargs).hex()\n    elif mode == 'ss58':\n        y =  import_object('scalecodec.utils.ss58.ss58_encode')(x, *args,**kwargs) \n    elif mode == 'python':\n        y =  hash(x)\n    elif mode == 'md5':\n        y =  hashlib.md5(x.encode()).hexdigest()\n    elif mode == 'sha256':\n        y =  hashlib.sha256(x.encode()).hexdigest()\n    elif mode == 'sha512':\n        y =  hashlib.sha512(x.encode()).hexdigest()\n    elif mode =='sha3_512':\n        y =  hashlib.sha3_512(x.encode()).hexdigest()\n    else:\n        raise ValueError(f'unknown mode {mode}')\n    return mode + ':' + y\n\ndef get_json(path, default=None):\n    if not path.endswith('.json'):\n        path = path + '.json'\n    if not os.path.exists(path):\n        return default\n    try:\n        with open(path, 'r') as file:\n            data = json.load(file)\n    except Exception as e:\n        return default\n    return data\n\n\ndef put_json(path:str, data:dict, key=None) -> dict:\n    if not path.endswith('.json'):\n        path = path + '.json'\n    data = json.dumps(data) if not isinstance(data, str) else data\n    dirpath = os.path.dirname(path)\n    if not os.path.exists(dirpath):\n        os.makedirs(dirpath, exist_ok=True)\n    with open(path, 'w') as file:\n        file.write(data)\n    return {'success': True, 'path': f'{path}', 'size': len(data)*8}\n\ndef rm_folder(path):\n    import shutils\n    if not os.path.exists(path):\n        return {'success': False, 'path': path}\n    if not os.path.isdir(path):\n        return {'success': False, 'path': path}\n    shutils.rmtree(path)\n    return {'success': True, 'path': path}\n\ndef rm_file(path):\n    if os.path.exists(path):\n        os.remove(path)\n    assert not os.path.exists(path), f'Failed to remove {path}'\n    return {'success': False, 'path': path}\n\ndef rm(path):\n    if os.path.isdir(path):\n        return rm_folder(path)\n    elif os.path.isfile(path):\n        return rm_file(path)\n    else:\n        raise ValueError(f'Path {path} does not exist or is neither a file nor a directory')\n\n"
    },
    "schema": {
        "exists": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "exists",
            "source": {
                "start": 33,
                "length": 2,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:2fc05e0856938a1f8226fb8570cd51cdaa0a1bc2f0429a17f609c131528d4ed4",
                "end": 35
            }
        },
        "get": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "k": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get",
            "source": {
                "start": 22,
                "length": 3,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:a1e0b6ab34048976c8011fad8cc2e4e290690ea38ab42dd2b77ab611ae3cd1b4",
                "end": 25
            }
        },
        "glob": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "./",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "glob",
            "source": {
                "start": 36,
                "length": 2,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:b8fc1065786c52ece0775cf4095b2e9727bff54c10e2cd608cb580009ad25901",
                "end": 38
            }
        },
        "hash": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "hash",
            "source": {
                "start": 39,
                "length": 2,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:9eaca88a60b171819a89fd745ca4f2ca510cc889c8ece6d260bb52e300c00d3c",
                "end": 41
            }
        },
        "item_path": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "item": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "item_path",
            "source": {
                "start": 15,
                "length": 2,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:ab97a7dff5751a2c7c47bc0d09210f634a81a9837977530bc7cc596abe409726",
                "end": 17
            }
        },
        "ls": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "./",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "ls",
            "source": {
                "start": 30,
                "length": 2,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:fbaa385955e580e4a1342ff34063bd876b8b7358d830363dbad1b2a71ef8ba7e",
                "end": 32
            }
        },
        "put": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "k": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "v": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "put",
            "source": {
                "start": 18,
                "length": 3,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:b00d3e8cc5f6484c2a1b4b3368c0cffc5ecc4e8aeff7586cc6b37827840b3e6b",
                "end": 21
            }
        },
        "resolve_path": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "resolve_path",
            "source": {
                "start": 12,
                "length": 2,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:fba23f423b60093446c63aed5db2dbde006b5dd6707b4eced145edc3e0f61744",
                "end": 14
            }
        },
        "rm": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "k": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "rm",
            "source": {
                "start": 26,
                "length": 3,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:b02457679cddbbb4b1fdb0f0910ecd0710da4ea8c36aefaf85918d9b9dd2d784",
                "end": 29
            }
        },
        "test": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "key": {
                    "value": "test",
                    "type": "str"
                },
                "value": {
                    "value": {
                        "a": 1
                    },
                    "type": "dict"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test",
            "source": {
                "start": 42,
                "length": 10,
                "path": "~/commune/commune/modules/store/store.py",
                "code": null,
                "hash": "sha256:78984d7315a0bf5470dd287d2a3fd34c74183aa043106a1c921f5c262f62011f",
                "end": 52
            }
        }
    },
    "name": "store",
    "key": "5FNhgKL1eJyYSi3Pv2uR5sn4Uszphm444ba7pn8TQsv8AmNX",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:ed7d6774a5ef53281a4a5e94c47331ba297f64aebf0d019b9298696989227143",
    "time": 1746536239.6240451,
    "signature": "0x70425b853be70da962ed15afd308e1deb2fd8098abe515dce91e3ef96053754436baf47017b54be962543706f412b35ab445f0056927faea71f06f1ffbfad48f"
}