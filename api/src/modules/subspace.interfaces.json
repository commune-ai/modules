{
    "code": {
        "interfaces.py": "# Python Substrate Interface Library\n#\n# Copyright 2018-2023 Stichting Polkascan (Polkascan Foundation).\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom typing import Callable\n\nfrom .extensions import Extension\nfrom .exceptions import ExtensionCallNotFound\n\n__all__ = ['ExtensionInterface']\n\n\nclass ExtensionInterface:\n    \"\"\"\n    Keeps tracks of active extensions and which calls can be made\n    \"\"\"\n\n    def __init__(self, substrate):\n        self.substrate = substrate\n        self.extensions = []\n\n    def __len__(self):\n        return len(self.extensions)\n\n    def __iter__(self):\n        for item in self.extensions:\n            yield item\n\n    def __add__(self, other):\n        self.register(other)\n        return self\n\n    def register(self, extension: Extension):\n        \"\"\"\n        Register an extension instance to the registry and calls initialization\n\n        Parameters\n        ----------\n        extension: Extension\n\n        Returns\n        -------\n\n        \"\"\"\n        if not isinstance(extension, Extension):\n            raise ValueError(\"Provided extension is not a subclass of Extension\")\n\n        extension.init(self.substrate)\n\n        self.extensions.append(extension)\n\n    def unregister_all(self):\n        \"\"\"\n        Unregister all extensions and free used resources and connections\n\n        Returns\n        -------\n\n        \"\"\"\n        for extension in self.extensions:\n            extension.close()\n\n    def call(self, name: str, *args, **kwargs):\n        \"\"\"\n        Tries to call extension function with `name` and provided args and kwargs\n\n        Will raise a `ExtensionCallNotFound` when no method is found in current extensions\n\n        Parameters\n        ----------\n        name\n        args\n        kwargs\n\n        Returns\n        -------\n\n        \"\"\"\n        return self.get_extension_callable(name)(*args, **kwargs)\n\n    def get_extension_callable(self, name: str) -> Callable:\n\n        for extension in self.extensions:\n            if isinstance(extension, Extension):\n                if hasattr(extension, name):\n                    try:\n                        # Call extension that implements functionality\n                        self.substrate.debug_message(f\"Call '{name}' using extension {extension.__class__.__name__} ...\")\n                        return getattr(extension, name)\n                    except NotImplementedError:\n                        pass\n\n        raise ExtensionCallNotFound(f\"No extension registered that implements call '{name}'\")\n\n    def __getattr__(self, name):\n        return self.get_extension_callable(name)\n"
    },
    "schema": {
        "call": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "name": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "args": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Tries to call extension function with `name` and provided args and kwargs\n\n        Will raise a `ExtensionCallNotFound` when no method is found in current extensions\n\n        Parameters\n        ----------\n        name\n        args\n        kwargs\n\n        Returns\n        -------\n\n        ",
            "cost": 1,
            "name": "call",
            "source": {
                "start": 75,
                "length": 17,
                "path": "~/commune/commune/modules/subspace/interfaces.py",
                "code": null,
                "hash": "sha256:ae6845a4b2ce5ba0fc8436a42cb0eb9a80a70e3d358c35812595cf144a74a068",
                "end": 92
            }
        },
        "get_extension_callable": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "name": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Callable"
            },
            "docs": null,
            "cost": 1,
            "name": "get_extension_callable",
            "source": {
                "start": 93,
                "length": 13,
                "path": "~/commune/commune/modules/subspace/interfaces.py",
                "code": null,
                "hash": "sha256:ecd89f8bc443fc7f76909b20e0652d212e9edb28c8785c818598739cd19f7dec",
                "end": 106
            }
        },
        "register": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "extension": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Register an extension instance to the registry and calls initialization\n\n        Parameters\n        ----------\n        extension: Extension\n\n        Returns\n        -------\n\n        ",
            "cost": 1,
            "name": "register",
            "source": {
                "start": 45,
                "length": 18,
                "path": "~/commune/commune/modules/subspace/interfaces.py",
                "code": null,
                "hash": "sha256:37921e10a2fddd7e2de4670cb52fd29082403fa3b8535280b40de1b6555766df",
                "end": 63
            }
        },
        "unregister_all": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Unregister all extensions and free used resources and connections\n\n        Returns\n        -------\n\n        ",
            "cost": 1,
            "name": "unregister_all",
            "source": {
                "start": 64,
                "length": 10,
                "path": "~/commune/commune/modules/subspace/interfaces.py",
                "code": null,
                "hash": "sha256:a6e04a8cbd69007dcbb26fd0b58580709cdbeb0ec408793dc9788f4ccd137c97",
                "end": 74
            }
        }
    },
    "name": "subspace.interfaces",
    "key": "5ECRBFox1fhsYBTTJXtjHkxh2rt6sgKSFSWefCkRAcbETJwW",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:40f5232dcfd64b651e9a2c6276c146cd07a00af859f0268e1f8d149c0600dfb0",
    "time": 1746536245.426846,
    "signature": "0xb42d5e9c26bca118f75e5489df91740d06cdb61e63d4f794e7de06380ee4596337e1273a17e982e761a03cdbbe24b90f5371e37e342e021bedd7268a6ad92e8e"
}