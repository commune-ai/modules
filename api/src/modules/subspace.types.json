{
    "code": {
        "types.py": "\"\"\"\nCommon types for the communex module.\n\"\"\"\n\nfrom typing import *\n\nSs58Address = NewType(\"Ss58Address\", str)\n\"\"\"Substrate SS58 address.\n\nThe `SS58 encoded address format`_ is based on the Bitcoin Base58Check format,\nbut with a few modification specifically designed to suite Substrate-based\nchains.\n\n.. _SS58 encoded address format:\n    https://docs.substrate.io/reference/address-formats/\n\"\"\"\n\n\n# TODO: replace with dataclasses\n\n# == Burn related\nMinBurn = NewType(\"MinBurn\", int)\nMaxBurn = NewType(\"MaxBurn\", int)\nBurnConfig = NewType(\"BurnConfig\", dict[MinBurn, MaxBurn])\n\n\nclass VoteMode:\n    authority = \"Authority\"\n    vote = \"Vote\"\n\nclass DisplayGovernanceConfiguration(TypedDict):\n    proposal_cost: float\n    proposal_expiration: float\n    vote_mode: VoteMode\n    proposal_reward_treasury_allocation: float\n    max_proposal_reward_treasury_allocation: float\n    proposal_reward_interval: int\n\n\nclass GovernanceConfiguration(TypedDict):\n    proposal_cost: int\n    proposal_expiration: int\n    vote_mode: int  # 0: Authority, 1: Vote\n    proposal_reward_treasury_allocation: float\n    max_proposal_reward_treasury_allocation: int\n    proposal_reward_interval: int\n\n\nclass DisplayBurnConfiguration(TypedDict):\n    min_burn: float\n    max_burn: float\n    adjustment_alpha: int\n    target_registrations_interval: int\n    target_registrations_per_interval: int\n    max_registrations_per_interval: int\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Chunk:\n    batch_requests: list[tuple[Any, Any]]\n    prefix_list: list[list[str]]\n    fun_params: list[tuple[Any, Any, Any, Any, str]]\n\n\nclass BurnConfiguration(TypedDict):\n    min_burn: int\n    max_burn: int\n    adjustment_alpha: int\n    target_registrations_interval: int\n    target_registrations_per_interval: int\n    max_registrations_per_interval: int\n\n\nclass NetworkParams(TypedDict):\n    # max\n    max_name_length: int\n    min_name_length: int  # dont change the position\n    max_allowed_subnets: int\n    max_allowed_modules: int\n    max_registrations_per_block: int\n    max_allowed_weights: int\n\n    # mins\n    floor_delegation_fee: int\n    floor_founder_share: int\n    min_weight_stake: int\n\n    # S0 governance\n    curator: Ss58Address\n    general_subnet_application_cost: int\n\n    # Other\n    subnet_immunity_period: int\n    governance_config: GovernanceConfiguration\n\n    kappa: int\n    rho: int\n\n    subnet_registration_cost: int\n\n\nclass SubnetParamsMaps(TypedDict):\n    netuid_to_founder: dict[int, Ss58Address]\n    netuid_to_founder_share: dict[int, int]\n    netuid_to_incentive_ratio: dict[int, int]\n    netuid_to_max_allowed_uids: dict[int, int]\n    netuid_to_max_allowed_weights: dict[int, int]\n    netuid_to_min_allowed_weights: dict[int, int]\n    netuid_to_max_weight_age: dict[int, int]\n    netuid_to_name: dict[int, str]\n    netuid_to_tempo: dict[int, int]\n    netuid_to_trust_ratio: dict[int, int]\n    netuid_to_bonds_ma: dict[int, int]\n    netuid_to_maximum_set_weight_calls_per_epoch: dict[int, int]\n    netuid_to_emission: dict[int, int]\n    netuid_to_immunity_period: dict[int, int]\n    netuid_to_governance_configuration: dict[int, GovernanceConfiguration]\n    netuid_to_min_validator_stake: dict[int, int]\n    netuid_to_max_allowed_validators: dict[int, int]\n    netuid_to_module_burn_config: dict[int, BurnConfiguration]\n    netuid_to_subnet_metadata: dict[int, str]\n\nclass SubnetParams(TypedDict):\n    name: str\n    tempo: int\n    min_allowed_weights: int\n    max_allowed_weights: int\n    max_allowed_uids: int\n    max_weight_age: int\n    trust_ratio: int\n    founder_share: int\n    incentive_ratio: int\n    founder: Ss58Address\n    maximum_set_weight_calls_per_epoch: int \n    bonds_ma: int \n    immunity_period: int\n    governance_config: GovernanceConfiguration\n    min_validator_stake: int \n    max_allowed_validators: int\n    module_burn_config: BurnConfiguration\n    subnet_metadata: str \n\n\nclass DisplaySubnetParams(TypedDict):\n    name: str\n    tempo: int\n    min_allowed_weights: int\n    max_allowed_weights: int\n    max_allowed_uids: int\n    max_weight_age: int\n    trust_ratio: int\n    founder_share: int\n    incentive_ratio: int\n    founder: Ss58Address\n    maximum_set_weight_calls_per_epoch: int \n    bonds_ma: int\n    immunity_period: int\n    governance_config: DisplayGovernanceConfiguration\n    min_validator_stake: float\n    max_allowed_validators: int \n    module_burn_config: DisplayBurnConfiguration\n    subnet_metadata: str\n    emission: float\n\n# redundant \"TypedDict\" inheritance because of pdoc warns.\n# see https://github.com/mitmproxy/pdoc/blob/26d40827ddbe1658e8ac46cd092f17a44cf0287b/pdoc/doc.py#L691-L692\nclass SubnetParamsWithEmission(SubnetParams, TypedDict):\n    \"\"\"SubnetParams with emission field.\"\"\"\n\n    emission: int\n    \"\"\"Subnet emission percentage (0-100).\n    \"\"\"\n\n\nclass ModuleInfo(TypedDict):\n    uid: int\n    key: Ss58Address\n    name: str\n    address: str  # \"<ip>:<port>\"\n    emission: int\n    incentive: int\n    dividends: int\n    stake_from: list[tuple[Ss58Address, int]]\n    regblock: int  # block number\n    last_update: int  # block number\n    stake: int\n    delegation_fee: int\n    metadata: str\n\n\nclass ModuleInfoWithBalance(ModuleInfo):\n    balance: int\n\n\nclass ModuleInfoWithOptionalBalance(ModuleInfo):\n    balance: int \n\n\nclass ChainTransactionError(Exception):\n    \"\"\"Error for any chain transaction related errors.\"\"\"\n\n\nclass NetworkError(Exception):\n    \"\"\"Base for any network related errors.\"\"\"\n\n\nclass NetworkQueryError(NetworkError):\n    \"\"\"Network query related error.\"\"\"\n\n\nclass NetworkTimeoutError(NetworkError):\n    \"\"\"Timeout error\"\"\"\n"
    },
    "schema": {},
    "name": "subspace.types",
    "key": "5Ham3ET77MMoheWaiaYVKe6wgzAEmpDntaKz6rmKGw4TYSwE",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:a05249b0d2590c0511d3b5f63b55897b02693f74dc091e8a876853a1f090a4ac",
    "time": 1746536248.311713,
    "signature": "0xfa7fca36f61fd6fd24f316c68f153e67a7d46b098c32ea53b7e2cd28ec209b5d20d2d3e6957c07e3eaa9ff9c248593509e92136b72fc31c18e5d47cfcaf5e182"
}