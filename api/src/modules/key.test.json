{
    "code": {
        "test.py": "import commune as c\n\nKey = c.module('key')\n\nclass Test:\n\n    def test_signing(self,  crypto_type=[0,1,2], data='test'):\n        # at the moment, the ed25519 is not supported in the current version of pycryptodome\n        if isinstance(crypto_type, list):\n            return  [test_signing(k, data=data) for k in crypto_type]\n\n        key = Key()\n        crypto_type = key.get_crypto_type(crypto_type)\n        key = Key(crypto_type=crypto_type)\n        sig = key.sign(data)\n        assert key.verify(data,sig, key.public_key)\n        return {'success':True, 'data':data, 'crypto_type' : key.crypto_type}\n\n    def test_encryption(self,  values = [10, 'fam', 'hello world'], crypto_type=[0,1,2]):\n        if isinstance(crypto_type, list):\n            return [self.test_encryption(values=values, crypto_type=k) for k in crypto_type]\n\n        key = Key()\n        crypto_type = key.get_crypto_type(crypto_type)\n        for value in values:\n            value = str(value)\n            key = c.new_key(crypto_type=crypto_type)\n            enc = key.encrypt(value)\n            dec = key.decrypt(enc)\n            assert dec == value, f'encryption failed, {dec} != {value}'\n        return {'encrypted':enc, 'decrypted': dec, 'crypto_type':key.crypto_type}\n\n    def test_encryption_with_password(self, value = 10, password = 'fam', crypto_type=[0,1,2]):\n        if isinstance(crypto_type, list):\n            return [self.test_encryption_with_password(value=value, password=password, crypto_type=k) for k in crypto_type]\n        key = Key()\n        crypto_type = key.get_crypto_type(crypto_type)\n        value = str(value)\n        key = key.new_key(crypto_type=crypto_type)\n        enc = key.encrypt(value, password=password)\n        dec = key.decrypt(enc, password=password)\n        assert dec == value, f'encryption failed, {dec} != {value}'\n        return {'encrypted':enc, 'decrypted': dec, 'crypto_type': crypto_type}\n\n    def test_key_encryption(self, test_key='test.key', crypto_type=[0,1,2]):\n        if isinstance(crypto_type, list):\n            return [self.test_key_encryption(test_key=test_key, crypto_type=k) for k in crypto_type]\n        key = Key()\n        crypto_type = key.get_crypto_type(crypto_type)\n        key = key.add_key(test_key, refresh=True)\n        og_key = key.get_key(test_key)\n        r = key.encrypt_key(test_key)\n        key.decrypt_key(test_key, password=r['password'])\n        key = key.get_key(test_key)\n        assert key.ss58_address == og_key.ss58_address, f'key encryption failed, {key.ss58_address} != {self.ss58_address}'\n        return {'success': True, 'msg': 'test_key_encryption passed'}\n\n    def test_key_management(self, key1='test.key' , key2='test2.key', crypto_type=[0,1,2]):\n\n        if isinstance(crypto_type, list):\n            return [self.test_key_management(key1=key1, key2=key2, crypto_type=k) for k in crypto_type]\n        key = Key()\n        crypto_type = key.get_crypto_type(crypto_type)\n        if key.key_exists(key1):\n            key.rm_key(key1)\n        if key.key_exists(key2):\n            key.rm_key(key2)\n        key.add_key(key1)\n        k1 = key.get_key(key1)\n        assert key.key_exists(key1), f'Key management failed, key still exists'\n        key.mv_key(key1, key2)\n        k2 = key.get_key(key2)\n        assert k1.ss58_address == k2.ss58_address, f'Key management failed, {k1.ss58_address} != {k2.ss58_address}'\n        assert key.key_exists(key2), f'Key management failed, key does not exist'\n        assert not key.key_exists(key1), f'Key management failed, key still exists'\n        key.mv_key(key2, key1)\n        assert key.key_exists(key1), f'Key management failed, key does not exist'\n        assert not key.key_exists(key2), f'Key management failed, key still exists'\n        key.rm_key(key1)\n        # self.rm_key(key2)\n        assert not key.key_exists(key1), f'Key management failed, key still exists'\n        assert not key.key_exists(key2), f'Key management failed, key still exists'\n        return {'success': True, 'msg': 'test_key_management passed'}\n\n\n    def test_signing(self, crypto_type=[1,2], data='test'):\n        # TODO: for some reason, the ed25519 is not supported in the current version of pycryptodome\n        for k in crypto_type:\n            key = Key(crypto_type=k)\n            sig = key.sign(data)\n            assert key.verify(data,sig, public_key=key.public_key)\n        key = Key()\n        sig = key.sign('test')\n        assert key.verify('test',sig, public_key=key.public_key)\n        return {'success':True}\n\n    def test_key_encryption(self, path = 'test.enc', password='1234'):\n        key = Key()\n        if key.key_exists(path):\n            key.rm_key(path)\n        key.add_key(path, refresh=True)\n        assert key.is_key_encrypted(path) == False, f'file {path} is encrypted'\n        key.encrypt_key(path, password=password)\n        assert key.is_key_encrypted(path) == True, f'file {path} is not encrypted'\n        key.decrypt_key(path, password=password)\n        assert key.is_key_encrypted(path) == False, f'file {path} is encrypted'\n        key.rm_key(path)\n        assert not key.key_exists(path), f'file {path} not deleted'\n        assert not c.path_exists(path), f'file {path} not deleted'\n        return {'success': True, 'msg': 'test_key_encryption passed'}\n\n    def test_move_key(self):\n        key = Key()\n        key.add_key('testfrom')\n        assert key.key_exists('testfrom')\n        og_key = key.get_key('testfrom')\n        key.mv_key('testfrom', 'testto')\n        assert key.key_exists('testto')\n        assert not key.key_exists('testfrom')\n        new_key = key.get_key('testto')\n        assert og_key.ss58_address == new_key.ss58_address\n        key.rm_key('testto')\n        assert not key.key_exists('testto')\n        return {'success':True, 'msg':'test_move_key passed', 'key':new_key.ss58_address}"
    },
    "schema": {
        "test_encryption": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "values": {
                    "value": [
                        10,
                        "fam",
                        "hello world"
                    ],
                    "type": "list"
                },
                "crypto_type": {
                    "value": [
                        0,
                        1,
                        2
                    ],
                    "type": "list"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test_encryption",
            "source": {
                "start": 19,
                "length": 13,
                "path": "~/commune/commune/core/key/test.py",
                "code": null,
                "hash": "sha256:0cd6d52c779d21452702bda7176b14bbde1b3a649c14a3eaabcf996776b64006",
                "end": 32
            }
        },
        "test_encryption_with_password": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "value": {
                    "value": 10,
                    "type": "int"
                },
                "password": {
                    "value": "fam",
                    "type": "str"
                },
                "crypto_type": {
                    "value": [
                        0,
                        1,
                        2
                    ],
                    "type": "list"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test_encryption_with_password",
            "source": {
                "start": 33,
                "length": 11,
                "path": "~/commune/commune/core/key/test.py",
                "code": null,
                "hash": "sha256:a374a430710ef888bece793b6212793add2fa42ce6228141184961e43951765a",
                "end": 44
            }
        },
        "test_key_encryption": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "test.enc",
                    "type": "str"
                },
                "password": {
                    "value": "1234",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test_key_encryption",
            "source": {
                "start": 97,
                "length": 14,
                "path": "~/commune/commune/core/key/test.py",
                "code": null,
                "hash": "sha256:0a2a519ddbce3916c4d11384a23854b396c663b296e5c691f6f3a53815503700",
                "end": 111
            }
        },
        "test_key_management": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "key1": {
                    "value": "test.key",
                    "type": "str"
                },
                "key2": {
                    "value": "test2.key",
                    "type": "str"
                },
                "crypto_type": {
                    "value": [
                        0,
                        1,
                        2
                    ],
                    "type": "list"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test_key_management",
            "source": {
                "start": 58,
                "length": 26,
                "path": "~/commune/commune/core/key/test.py",
                "code": null,
                "hash": "sha256:6498b3ec626dbefa4c4ca1639fc25f6daf39d76bf0809915d380cf7175c178e1",
                "end": 84
            }
        },
        "test_move_key": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test_move_key",
            "source": {
                "start": 112,
                "length": 13,
                "path": "~/commune/commune/core/key/test.py",
                "code": null,
                "hash": "sha256:aaebb3a0dbdadcca7745e36695f6912204e31735f7666ce4fd97ad8d15b51cee",
                "end": 125
            }
        },
        "test_signing": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "crypto_type": {
                    "value": [
                        1,
                        2
                    ],
                    "type": "list"
                },
                "data": {
                    "value": "test",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test_signing",
            "source": {
                "start": 86,
                "length": 10,
                "path": "~/commune/commune/core/key/test.py",
                "code": null,
                "hash": "sha256:a292389a5fed7f69d5a48f7889e5b10e179c0cc26159a36fca8adccec4e6e1bd",
                "end": 96
            }
        }
    },
    "name": "key.test",
    "key": "5Fv3J3JrLfEDYjzyj6p3jDnfGa3JTt7oQZShNanHmceQqeq9",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:684947839b9bd10406814392582d4c4b847e350cbe659d09c508626e8f7a5377",
    "time": 1746536307.447019,
    "signature": "0x4ac6ae7ddbfe873364ba9556850da3a1ca6acb89b1739dcf5be5b1628fc9e8078d2692e3067bd7dfd187122d52e69a0545fbcdbc3cf87ee2563aa676bc3d8f8e"
}