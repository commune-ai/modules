{
    "code": {
        "README.md": "# The CLI Module\n\nWe have a pythonic cli for commune, which is a wrapper around the `c.Module` library. This is a simple way to interact with the commune library. This does not need to be formated like argparse, and is more like a pythonic cli, where you can test out the functions and modules.\n\nThere are two paths to your first aergument\n\nc {fn} *args **kwargs  (default module is \"module\")\n\nor \n\nc {module}/{fn} *args **kwarrgs\n\n```bash\nc {module_name}/{function_name} *args **kwargs\n```\n```bash\nc module/ls ./\n```\n\nThe root module is specified as the module that is closest to the commune/ repo in this case its commune/module.py\n\nby default the module is isgnored in the naming convention to add ease \n\nNaming simplifications in commune\n\ncommune/module.py --> commune\nstorage/module.py --> storage\nstorage/storage/module.py -> storage\n\n\nif you specifiy a root function in module, then you can call the module directly. \n```bash\nc {function_name} *args **kwargs\n```\n\n```bash\nTo get the code of the module\n\nc {module_name}/code\n```bash\nc module/code\n```\nor you can call the code function on the root module\n```bash\n\n## Pythonic \nYou do not need to specify the module when calling the root (name=module) module.\n```bash\n\n```\nExample \n\n\nFor example, the following command:\n```bash\nc ls ./ # \n```\nis the same as\n```bash\nc module/ls ./\n```\nand\n```python\nimport commune as c\nc.ls('./')\n```\n\nTo make a new module\n```\nc new_module agi\n```\n```python\nc.new_module(\"agi\")\n```\n\n\nThis will create a new module called `agi` in the `modules` directory. \nThis will be located in \n\nto get the config of the model.agi module, you can use the following command:\n\n```bash\nc agi/config\n```\nif you dont have a config or yaml file, the key word arguments will be used as the config.\n\nThis is the same as the following python code:\n```python\n\nimport commune as c\nc.module(\"agi\").config()\n```\n\n\nTo get the code\n```bash\nc agi/code\n```\n\n```python\n\nimport commune as c\n\nclass Agi(c.Module):\n    def __init__(self, a=1, b=2):\n        self.set_config(locals())\n\n    def call(self, x:int = 1, y:int = 2) -> int:\n        c.print(self.config)\n        c.print(self.config, 'This is the config, it is a Munch object')\n        return x + y\n    \n\n```\n\nto get the config, which is a yaml, or the key word arguments of the __init__\n```bash\nc agi/config\n```\n\n\nThe \n\nThe commune cli needs to be able to call functions from the modules. This is a simple way to call functions from the modules.\nc {modulename}/{fn} *args **kwargs\n\n```bash\nc serve module\n\n```\nTo call the forward function of the model.openai module\n```bash\nc call module/ask hey # c.call('module/ask', 'hey')\n# c.connect('module').ask('hey')\n```\nIf you want to include positional arguments then do it \n\n```bash\n\nc call module/ask hey stream=1 \n# c.call('module/ask', 'hey', stream=1)\n# c.connect('module').ask('hey', stream=1)\n```\n\n\nc cmd \n\n\nTricks \n\n```bash\nc # takes you to commune by doing c code ./\n```\n\ngetting code\n\nc code module/code # gets the code of module/code module\nc schema /code gets the code of the module key\n\n\ncool shortcuts\n\n\nc module/ cals the module forward function\nc module/forward calls the forward cuntion\nc module/add a=1 b=1 equals c module/add 1 1 \nc # just goes to commune repo\n\n\n\nc ai what is the point of love \n\nLimitatons\n\n- Lists and dictionaries are not supported \n- Only positional arguments are supported\n- Only one function can be called at a time\n\n\n",
        "__init__.py": "from .cli import Cli  \n",
        "cli.py": "import sys\nimport time\nimport sys\nfrom typing import Any\nimport inspect\nimport commune as c\n\nclass Cli(c.Module):\n\n    def forward(self,\n                fn='vs',  \n                module='module', \n                default_fn = 'forward'):\n        t0 = time.time()\n        argv = sys.argv[1:]\n        # ---- FUNCTION\n        module = c.module(module)()\n        if len(argv) == 0:\n            argv += [fn]\n\n        fn = argv.pop(0)\n\n        if hasattr(module, fn):\n            fn_obj = getattr(module, fn)\n        elif '/' in fn:\n            if fn.startswith('/'):\n                fn = fn[1:]\n            if fn.endswith('/'):\n                fn = fn + default_fn\n            new_module = '/'.join(fn.split('/')[:-1]).replace('/', '.')\n            module =  self.module(new_module)()\n            fn = fn.split('/')[-1]\n            fn_obj = getattr(module, fn)\n\n        else:\n            print('Fn Not Found, checking in core modules')\n            fn_obj = None\n            for core in c.core_modules:\n                print(f'Checking in {core}...')\n                module = c.module(core)()\n                if hasattr(module, fn):\n                    fn_obj = getattr(module, fn)\n                    break\n            if fn_obj is None:\n                raise Exception(f'Function {fn} not found in module {module}')\n        # ---- PARAMS ----\n        params = {'args': [], 'kwargs': {}} \n        parsing_kwargs = False\n        if len(argv) > 0:\n            for arg in argv:\n                if '=' in arg:\n                    parsing_kwargs = True\n                    key, value = arg.split('=')\n                    params['kwargs'][key] = self.str2python(value)\n                else:\n                    assert parsing_kwargs is False, 'Cannot mix positional and keyword arguments'\n                    params['args'].append(self.str2python(arg))        \n        # run thefunction\n        result = fn_obj(*params['args'], **params['kwargs']) if callable(fn_obj) else fn_obj\n        speed = time.time() - t0\n        module_name = module.__class__.__name__\n        c.print(f'Call({module_name}/{fn}, speed={speed:.2f}s)')\n        duration = time.time() - t0\n        is_generator = self.is_generator(result)\n        if is_generator:\n            for item in result:\n                if isinstance(item, dict):\n                    c.print(item)\n                else:\n                    c.print(item, end='')\n        else:\n            c.print(result)\n\n\n    def str2python(self, x):\n        x = str(x)\n        if isinstance(x, str) :\n            if x.startswith('py(') and x.endswith(')'):\n                try:\n                    return eval(x[3:-1])\n                except:\n                    return x\n        if x.lower() in ['null'] or x == 'None':  # convert 'null' or 'None' to None\n            return None \n        elif x.lower() in ['true', 'false']: # convert 'true' or 'false' to bool\n            return bool(x.lower() == 'true')\n        elif x.startswith('[') and x.endswith(']'): # this is a list\n            try:\n                list_items = x[1:-1].split(',')\n                # try to convert each item to its actual type\n                x =  [str2python(item.strip()) for item in list_items]\n                if len(x) == 1 and x[0] == '':\n                    x = []\n                return x\n            except:\n                # if conversion fails, return as string\n                return x\n        elif x.startswith('{') and x.endswith('}'):\n            # this is a dictionary\n            if len(x) == 2:\n                return {}\n            try:\n                dict_items = x[1:-1].split(',')\n                # try to convert each item to a key-value pair\n                return {key.strip(): str2python(value.strip()) for key, value in [item.split(':', 1) for item in dict_items]}\n            except:\n                # if conversion fails, return as string\n                return x\n        else:\n            # try to convert to int or float, otherwise return as string\n            \n            for type_fn in [int, float]:\n                try:\n                    return type_fn(x)\n                except ValueError:\n                    pass\n        return x\n\n\n    def print(self, *args, **kwargs):\n        \"\"\"\n        Print with a custom prefix\n        \"\"\"\n        prefix = kwargs.pop('prefix', '')\n        if prefix:\n            print(f'{prefix}: ', end='')\n        print(*args, **kwargs)\n\n\n    def is_generator(self, obj):\n        \"\"\"\n        Is this shiz a generator dawg?\n        \"\"\"\n        if isinstance(obj, str):\n            if not hasattr(self, obj):\n                return False\n            obj = getattr(self, obj)\n        if not callable(obj):\n            result = inspect.isgenerator(obj)\n        else:\n            result =  inspect.isgeneratorfunction(obj)\n        return result\n\n\n    def main(self,\n                fn='vs',  \n                module='module', \n                default_fn = 'forward'):\n        t0 = time.time()\n        argv = sys.argv[1:]\n        # ---- FUNCTION\n        module = self.module(module)()\n        if len(argv) == 0:\n            argv += [fn]\n\n        fn = argv.pop(0)\n\n        if hasattr(module, fn):\n            fn_obj = getattr(module, fn)\n        elif '/' in fn:\n            if fn.startswith('/'):\n                fn = fn[1:]\n            if fn.endswith('/'):\n                fn = fn + default_fn\n            new_module = '/'.join(fn.split('/')[:-1]).replace('/', '.')\n            module =  self.get_module(new_module)()\n            fn = fn.split('/')[-1]\n            fn_obj = getattr(module, fn)\n\n        else:\n            raise Exception(f'Function {fn} not found in module {module}')\n        # ---- PARAMS ----\n        params = {'args': [], 'kwargs': {}} \n        parsing_kwargs = False\n        if len(argv) > 0:\n            for arg in argv:\n                if '=' in arg:\n                    parsing_kwargs = True\n                    key, value = arg.split('=')\n                    params['kwargs'][key] = self.str2python(value)\n                else:\n                    assert parsing_kwargs is False, 'Cannot mix positional and keyword arguments'\n                    params['args'].append(self.str2python(arg))        \n        # run thefunction\n        result = fn_obj(*params['args'], **params['kwargs']) if callable(fn_obj) else fn_obj\n        speed = time.time() - t0\n        module_name = module.__class__.__name__\n        self.print(f'Call({module_name}/{fn}, speed={speed:.2f}s)')\n        duration = time.time() - t0\n        is_generator = self.is_generator(result)\n        if is_generator:\n            for item in result:\n                if isinstance(item, dict):\n                    self.print(item)\n                else:\n                    self.print(item, end='')\n        else:\n            self.print(result)\n\n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "fn": {
                    "value": "vs",
                    "type": "str"
                },
                "module": {
                    "value": "module",
                    "type": "str"
                },
                "default_fn": {
                    "value": "forward",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 10,
                "length": 63,
                "path": "~/commune/commune/core/cli/cli.py",
                "code": null,
                "hash": "sha256:36e51f1e5394e31c36cf3e5b27ead83dc15022dc011e0b1a17b8282a5eb14b73",
                "end": 73
            }
        },
        "is_generator": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "obj": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Is this shiz a generator dawg?\n        ",
            "cost": 1,
            "name": "is_generator",
            "source": {
                "start": 130,
                "length": 13,
                "path": "~/commune/commune/core/cli/cli.py",
                "code": null,
                "hash": "sha256:b9d1fc4fc09b41c5481a2bc92ecab9ee5aaa7f0ec1e56fb3f9b12d9ae202d2af",
                "end": 143
            }
        },
        "main": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "fn": {
                    "value": "vs",
                    "type": "str"
                },
                "module": {
                    "value": "module",
                    "type": "str"
                },
                "default_fn": {
                    "value": "forward",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "main",
            "source": {
                "start": 145,
                "length": 54,
                "path": "~/commune/commune/core/cli/cli.py",
                "code": null,
                "hash": "sha256:f7f2cab972c0beed9aa9c7b63e82bb62f443a60d93fc96e8c29264eed5915920",
                "end": 199
            }
        },
        "print": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "args": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Print with a custom prefix\n        ",
            "cost": 1,
            "name": "print",
            "source": {
                "start": 120,
                "length": 8,
                "path": "~/commune/commune/core/cli/cli.py",
                "code": null,
                "hash": "sha256:ad782436ffcfdfc3360e3c79c5f3916d043b164b00fabb1a12a87d7f6680a783",
                "end": 128
            }
        },
        "str2python": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "x": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "str2python",
            "source": {
                "start": 75,
                "length": 43,
                "path": "~/commune/commune/core/cli/cli.py",
                "code": null,
                "hash": "sha256:b99e005eb85ff0a4b1ece29f8f529182b9faebb76e566a4c0b24955b5603e03e",
                "end": 118
            }
        }
    },
    "name": "cli",
    "key": "5FBfFCH2kXZ4ADJHWu4wVK47hdpJXmYbC3cNnxaiP2v7sX5S",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:2510c6b0bc66bb2a1062ce3eab0122e0441212b307f4f7431ab6ecad79be5d0d",
    "time": 1746536204.135957,
    "signature": "0x4064936e36745df8e21764892ef24298cbdae916525073d0e7fe3b52be01375f708f6d2d2f69a235b3f57a3414cd863c1184278599bca0c0e9897aa5ddc35482"
}