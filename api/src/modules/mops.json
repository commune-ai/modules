{
    "code": {
        "mops.py": "import commune as c \nclass Mops:\n    \"\"\"\n    A base class that provides fundamental functionality for commune modules.\n    \"\"\"\n    def __init__(self, **kwargs):\n        \"\"\"\n        Initialize the base class with configurable parameters.\n        Args:\n            **kwargs: Arbitrary keyword arguments to configure the instance\n        \"\"\"\n        # Store configuration as a Munch object for dot notation access\n        self.config = c.munch(kwargs)\n        \n    def call(self, fn_name: str, *args, **kwargs):\n        \"\"\"\n        Dynamically call a method of the class.\n        Args:\n            fn_name (str): Name of the method to call\n            *args: Positional arguments to pass to the method\n            **kwargs: Keyword arguments to pass to the method\n        Returns:\n            Result of the called method\n        \"\"\"\n        if hasattr(self, fn_name):\n            return getattr(self, fn_name)(*args, **kwargs)\n        raise AttributeError(f\"Method {fn_name} not found\")\n\n    def get_config(self) -> dict:\n        \"\"\"\n        Get the current configuration.\n        Returns:\n            dict: Current configuration\n        \"\"\"\n        return self.config\n\n    def update_config(self, **kwargs):\n        \"\"\"\n        Update the configuration with new values.\n        Args:\n            **kwargs: New configuration parameters\n        \"\"\"\n        self.config.update(kwargs)\n\n    def test(self) -> bool:\n        \"\"\"\n        Basic test method to verify the class is working.\n        Returns:\n            bool: True if test passes\n        \"\"\"\n        try:\n            # Basic functionality test\n            self.update_config(test_key=\"test_value\")\n            assert self.get_config().test_key == \"test_value\"\n            return True\n        except Exception as e:\n            c.print(f\"Test failed: {str(e)}\", color='red')\n            return False\n\n    @classmethod\n    def help(cls):\n        \"\"\"\n        Display help information about the class.\n        \"\"\"\n        c.print(cls.__doc__, color='green')\n        c.print(\"\\nAvailable methods:\", color='yellow')\n        for method_name in dir(cls):\n            if not method_name.startswith('_'):\n                method = getattr(cls, method_name)\n                if callable(method):\n                    c.print(f\"- {method_name}: {method.__doc__}\", color='cyan')\n"
    },
    "schema": {
        "call": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "fn_name": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "args": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Dynamically call a method of the class.\n        Args:\n            fn_name (str): Name of the method to call\n            *args: Positional arguments to pass to the method\n            **kwargs: Keyword arguments to pass to the method\n        Returns:\n            Result of the called method\n        ",
            "cost": 1,
            "name": "call",
            "source": {
                "start": 15,
                "length": 13,
                "path": "~/commune/commune/modules/mops/mops.py",
                "code": null,
                "hash": "sha256:2531d906fa5c533ed49110d4765e14a12dcbbc0d0d0fdac90f4bc945e3e321ac",
                "end": 28
            }
        },
        "get_config": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'dict'>"
            },
            "docs": "\n        Get the current configuration.\n        Returns:\n            dict: Current configuration\n        ",
            "cost": 1,
            "name": "get_config",
            "source": {
                "start": 29,
                "length": 7,
                "path": "~/commune/commune/modules/mops/mops.py",
                "code": null,
                "hash": "sha256:eb1fd67fb424851da70a3e4ffc2d33b70d4758659d90d9b23ed35cd718964e44",
                "end": 36
            }
        },
        "help": {
            "input": {},
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Display help information about the class.\n        ",
            "cost": 1,
            "name": "help",
            "source": {
                "start": 60,
                "length": 12,
                "path": "~/commune/commune/modules/mops/mops.py",
                "code": null,
                "hash": "sha256:736e879bff1e3119241562d0dee802b189f2bb004b718eabe18fe467fd3cdeef",
                "end": 72
            }
        },
        "test": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'bool'>"
            },
            "docs": "\n        Basic test method to verify the class is working.\n        Returns:\n            bool: True if test passes\n        ",
            "cost": 1,
            "name": "test",
            "source": {
                "start": 45,
                "length": 14,
                "path": "~/commune/commune/modules/mops/mops.py",
                "code": null,
                "hash": "sha256:1b286ea6e70100fcd233fa3c57f2189d50e2596a1bd99e51fc9ccaffd3192a6a",
                "end": 59
            }
        },
        "update_config": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Update the configuration with new values.\n        Args:\n            **kwargs: New configuration parameters\n        ",
            "cost": 1,
            "name": "update_config",
            "source": {
                "start": 37,
                "length": 7,
                "path": "~/commune/commune/modules/mops/mops.py",
                "code": null,
                "hash": "sha256:47c6d8e62fb89f1ff0cc17bb3f41d0c7e72bef76a344e30dc9d4374d5bc48dc4",
                "end": 44
            }
        }
    },
    "name": "mops",
    "key": "5DnXkmk6otCVvQMAxpd7cAJus5eGyerVa4vWpTfoLdqH3xwY",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:db17e8dfbed2aeb0089b91211af11ceda8b9c6d7dc28efbe4ff223d158f38f23",
    "time": 1746536227.27694,
    "signature": "0x840b14c289f1bd1f6094bf8d9c481e82cf829c156ad7478fe7a98f1ba88bfe1cd9fabfb929ad58b6cdeee2692fe9afaac70ef752843d249cfc7b297db468518f"
}