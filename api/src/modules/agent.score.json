{
    "code": {
        "agent/score.py": "\n\nimport os\nimport json\nimport commune as c\n\n\n\nclass Score:\n    def __init__(self, agent='agent'):\n        self.agent = c.module(agent)()\n    def forward(self, module:str, **kwargs):\n        if c.path_exists(module):\n            code = c.file2text(module)\n        else:\n            code = c.code(module)\n        \n        prompt = f\"\"\"\n        GOAL:\n        score the code out of 100 and provide feedback for improvements \n        and suggest point additions if they are included to\n        be very strict and suggest points per improvement that \n        you suggest in the feedback\n        YOUR SCORING SHOULD CONSIDER THE FOLLOWING VIBES:\n        - readability\n        - efficiency\n        - style\n        - correctness\n        - comments should be lightlu considered only when it makes snes, we want to avoid over commenting\n        - code should be self explanatory\n        - code should be well structured\n        - code should be well documented\n        CODE: \n        {code}\n        OUTPUT_FORMAT:\n        <OUTPUT>DICT(score:int, feedback:str, suggestions=List[dict(improvement:str, delta:int)]])</OUTPUT>\n        \"\"\"\n        output = ''\n        for ch in  self.agent.forward(prompt, stream=True, **kwargs):\n            output += ch\n            print(ch, end='')\n            if '</OUTPUT>' in output:\n                break\n        return json.loads(output.split('<OUTPUT>')[1].split('</OUTPUT>')[0])\n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "module": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 12,
                "length": 33,
                "path": "~/commune/commune/modules/agent/agent/score.py",
                "code": null,
                "hash": "sha256:5ccf11114a735301fb25e7862264f5559401f876ca07c01ecce23e182d78bdcd",
                "end": 45
            }
        }
    },
    "name": "agent.score",
    "key": "5GvWFj3yXX2849paUaHKyXBe52aruEnGe6HCwf3AH55cBs7m",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:714c7ab91ccb78efb2517e765048cc45c7c693f02869bb6f1e4cccf5ec5205db",
    "time": 1746536169.0089102,
    "signature": "0xcc10c6538eb63e4136e4eb8a0ad90f0d0575663fed3be2d1f5a43acd526edf1f18b92995ad03095b06253803abba5145e05bbec13696b79e81f1de5ea1fe6987"
}