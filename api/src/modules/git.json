{
    "code": {
        "src/git.py": "import commune as c\nimport subprocess\nimport requests\nimport base64\nimport re\nimport pandas as pd\nimport os\n\nclass Git:\n\n    def __init__(self, path:str = './'):\n        self.path = os.path.abspath(os.path.expanduser(path))\n    def is_repo(self, path:str ):\n        # has the .git folder\n        return c.cmd(f'ls -a {path}').count('.git') > 0\n\n    def push(self, path=None, msg:str='update', safety=True):\n        path = self.get_path(path)\n        cmds = ['git add .', f'git commit -m \"{msg}\"', 'git push']\n        if safety:\n            # check if the commands are safe to run\n            if input(f'Do you want to run these cmds {cmds}?') != 'y':\n                return {'status': 'cancelled', 'cmds': cmds}\n        for cmd in cmds:\n            c.cmd(cmd, cwd=cwd)\n        return {\n            'status': 'success',\n            'cmds': cmds,\n        }\n\n    def gitpath(self, path:str = './'):\n        \"\"\"\n        find the closest git path to the current path\n        \n        \"\"\"\n        import os\n        paths = []\n        for root, dirs, files in os.walk(path):\n            if '.git' in dirs:\n                paths.append(root)\n                continuec\n\n        return paths\n\n    \n    def git_repos(self, path='./'):\n            import os\n            repos = []\n            for root, dirs, files in os.walk(path):\n                for d in dirs:\n                    if d.endswith('.git'):\n                        repos +=  [f\"{root}\"]\n\n            repos = [r for r in repos if not r == path]\n\n            return repos\n\n    def repo_url(self, path:str = None) -> str:\n        lpath = self.get_path(path)\n        return c.cmd('git remote -v',cwd=path, verbose=False).split('\\n')[0].split('\\t')[1].split(' ')[0]\n    \n    def hash(self, path:str = None):\n        path = self.get_path(path)\n        return c.cmd('git rev-parse HEAD', cwd=path, verbose=False).split('\\n')[0].strip()\n\n    def history(self, path:str = None):\n        \"\"\"\n        a history ofo the commits and the times\n        \"\"\"\n        path = self.get_path(path)\n        result = c.cmd('git log', cwd=path, verbose=False)\n        return result\n\n    def reset_hard(self, path:str = None):\n        path = self.get_path(path)\n        return c.cmd('git reset --hard', cwd=path, verbose=False)\n    \n    def get_path(self, path:str = None):\n        if path == None:\n            path = self.path\n        return path\n\n    def commit_hash(self, lib_path:str = None):\n        if lib_path == None:\n            lib_path = self.lib_path\n        return c.cmd('git rev-parse HEAD', cwd=lib_path, verbose=False).split('\\n')[0].strip()\n    \n    def get_info(self, path:str = None, name:str = None, n=10):\n        path = path or c.modules_path\n        git_path = path + '/.git'\n        git_url = c.cmd('git config --get remote.origin.url', cwd=path).strip().split('\\n')[0].strip().split(' ')[0].strip()\n        git_branch = c.cmd('git rev-parse --abbrev-ref HEAD', cwd=path).strip().split('\\n')[0].strip().split(' ')[0].strip()\n        git_commit = c.cmd('git rev-parse HEAD', cwd=path)\n        git_commit = git_commit.split('\\n')[0].strip().split(' ')[0].strip()\n        past_commits = c.cmd('git log --oneline', cwd=path).split('\\n')\n        # get all of the info of each commit\n        past_commits = past_commits[:n]\n        commit2comment = {}\n        for co in past_commits:\n            if len(co) == 0:\n                continue\n            commit, comment = co.split(' ', 1)\n            commit2comment[commit] = comment\n        print(past_commits)\n        return {\n            'url': git_url,\n            'branch': git_branch,\n            'commit': git_commit,\n            'past_commits': commit2comment,\n        }\n        \n    def commits(self, path: str = None, n: int = 10,features=['date', 'additions', 'deletions']) -> pd.DataFrame:\n        \"\"\"\n        Get a DataFrame of commits with comment, time, and number of additions/deletions.\n        \n        Args:\n            path: Path to the git repository. Defaults to self.path.\n            n: Number of commits to retrieve. Defaults to 10.\n            \n        Returns:\n            pandas DataFrame with commit information.\n        \"\"\"\n        import pandas as pd\n        \n        path = self.get_path(path)\n        \n        # Get commit hashes, authors, dates, and messages\n        log_format = \"%H|%an|%ad|%s\"\n        log_cmd = f'git log --pretty=format:\"{log_format}\" -n {n}'\n        log_result = c.cmd(log_cmd, cwd=path, verbose=False).split('\\n')\n        \n        # Get stats for each commit\n        stats_cmd = f'git log --numstat --pretty=format:\"%H\" -n {n}'\n        stats_result = c.cmd(stats_cmd, cwd=path, verbose=False).split('\\n')\n        \n        # Process the results\n        commits = []\n        current_commit = None\n        additions = 0\n        deletions = 0\n        \n        for line in stats_result:\n            if line.strip():\n                if len(line) == 40:  # This is a commit hash\n                    current_commit = line\n                    additions = 0\n                    deletions = 0\n                else:\n                    # This is a stats line\n                    parts = line.strip().split('\\t')\n                    if len(parts) == 3:\n                        try:\n                            additions += int(parts[0]) if parts[0] != '-' else 0\n                            deletions += int(parts[1]) if parts[1] != '-' else 0\n                        except ValueError:\n                            pass\n                        \n                        # Store the stats for this commit\n                        for log_line in log_result:\n                            if log_line.startswith(current_commit):\n                                hash_val, author, date, message = log_line.split('|', 3)\n                                if hash_val == current_commit:\n                                    commits.append({\n                                        'hash': hash_val,\n                                        'author': author,\n                                        'date': date,\n                                        'message': message,\n                                        'additions': additions,\n                                        'deletions': deletions\n                                    })\n                                    break\n        \n        # Create DataFrame\n        if not commits:\n            # Alternative approach if the above didn't work\n            commits = []\n            for line in log_result:\n                if not line.strip():\n                    continue\n                hash_val, author, date, message = line.split('|', 3)\n                # Get stats for this specific commit\n                stat_cmd = f'git show --numstat --format=\"%h\" {hash_val}'\n                stat_output = c.cmd(stat_cmd, cwd=path, verbose=False).split('\\n')\n                \n                add = 0\n                delete = 0\n                for stat_line in stat_output[1:]:  # Skip the first line which is the commit hash\n                    parts = stat_line.strip().split('\\t')\n                    if len(parts) == 3:\n                        try:\n                            add += int(parts[0]) if parts[0] != '-' else 0\n                            delete += int(parts[1]) if parts[1] != '-' else 0\n                        except ValueError:\n                            pass\n                \n                commits.append({\n                    'hash': hash_val,\n                    'author': author,\n                    'date': date,\n                    'message': message,\n                    'additions': add,\n                    'deletions': delete\n                })\n\n        \n        df =  pd.DataFrame(commits)\n        # remove duplicate hashes and add the additions and deletionsa and group by the hash\n\n        df = df.groupby('hash').agg({\n            'author': 'first',\n            'date': 'first',\n            'message': 'first',\n            'additions': 'sum',\n            'deletions': 'sum'\n        }).reset_index()\n\n        # order by date\n        df = df.sort_values('date', ascending=False)\n        df['date'] = pd.to_datetime(df['date'])\n        df['date'] = df['date'].dt.strftime('%Y-%m-%d %H:%M:%S')\n        df['date'] = pd.to_datetime(df['date'])\n        df['date'] = df['date'].dt.tz_localize('UTC').dt.tz_convert('Asia/Calcutta')\n        print('Repo(url={url}, branch={branch}, commit={commit})'.format( \n            url=self.repo_url(path),\n            branch=self.branch(path),\n            commit=self.commit_hash(path)\n        ))\n        return df[features]\n    \n    def gitpath(self, path, **kwargs) -> str:\n        \"\"\"\n        find the github url of a module\n        \"\"\"\n        while len(path.split('/')) > 1:\n            path = '/'.join(path.split('/')[:-1])\n            git_path = path + '/.git'\n            if os.path.exists(git_path):\n                return git_path\n        return None\n\n    def giturl(self, url:str='commune-ai/commune'):\n        gitprefix = 'https://github.com/'\n        gitsuffix = '.git'\n        if not url.startswith(gitprefix):\n            url = gitprefix + url\n        if not url.endswith(gitsuffix):\n            url = url + gitsuffix\n        return url\n\n    def diff(self, path:str = None, relative=False):\n        \"\"\"\n        Get the diff of files in a git repository.\n        \n        Args:\n            path: Path to the git repository. Defaults to self.path.\n            relative: If True, returns relative paths. If False, returns absolute paths.\n            \n            \n        Returns:\n            Dictionary mapping file paths to their diffs.\n        \"\"\"\n        if path is None:\n            path = self.path\n        \n        # Run git diff command\n        response = c.cmd('git diff', cwd=path, verbose=False)\n\n        # return the diff\n\n        # process this to get the path2diff where the diff is the addiitons and deletions\n        diff = {}\n        for chunk in response.split('diff --git'):\n            # get the path\n            lines = chunk.split('\\n')\n            if len(lines) < 2:\n                continue\n            if len(lines[0].split(' ')) < 3:\n                continue\n            diff[lines[0].split(' ')[2][2:]] = '\\n'.join(lines[1:])\n        diff = {k: v for k,v in diff.items()}\n        return diff\n    def dff(self, path='./'):\n        diff = self.diff(path)\n        df  = []\n        for k,v in diff.items():\n            df.append({\n                'path': k,\n                'additions': len(re.findall(r'\\+', v)),\n                'deletions': len(re.findall(r'-', v)),\n                # 'hash': c.hash(v),\n            })\n\n        df = pd.DataFrame(df)\n        return df\n            \n    def branch(self, path=None):\n        path = self.get_path(path)\n        return c.cmd('git rev-parse --abbrev-ref HEAD', cwd=path).strip().split('\\n')[0].strip().split(' ')[0].strip()\n\n    def init_repo(\n        repo_path: str, \n        user_name: str = None, \n        user_email: str = None,\n        initial_branch: str = \"main\",\n        verbose: bool = False\n    ) -> str:\n        \"\"\"\n        Initialize a Git repository with optional configuration.\n        \n        Args:\n            repo_path (str): Path where the Git repository should be initialized\n            user_name (str, optional): Git user name for this repository\n            user_email (str, optional): Git user email for this repository\n            initial_branch (str, optional): Name of the initial branch\n            verbose (bool): Whether to print command output\n            \n        Returns:\n            str: Command output\n        \"\"\"\n        import os\n        \n        # Create directory if it doesn't exist\n        os.makedirs(repo_path, exist_ok=True)\n        \n        # Initialize the repository with specified branch name\n        result = cmd(f\"git init -b {initial_branch}\", cwd=repo_path, verbose=verbose)\n        \n        # Configure user if provided\n        if user_name:\n            cmd(f\"git config user.name '{user_name}'\", cwd=repo_path, verbose=verbose)\n        \n        if user_email:\n            cmd(f\"git config user.email '{user_email}'\", cwd=repo_path, verbose=verbose)\n        \n        # Create initial README and commit\n        with open(os.path.join(repo_path, \"README.md\"), \"w\") as f:\n            f.write(f\"# {os.path.basename(repo_path)}\\n\\nInitialized with Python.\")\n        \n        cmd(\"git add README.md\", cwd=repo_path, verbose=verbose)\n        cmd(\"git commit -m 'Initial commit'\", cwd=repo_path, verbose=verbose)\n        \n        return result"
    },
    "schema": {
        "branch": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "branch",
            "source": {
                "start": 296,
                "length": 3,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:f499cca8cd89bcbb2f530d04ba56ff4eb1631205c41ebc87fe1f7db3716ce3e7",
                "end": 299
            }
        },
        "commit_hash": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "lib_path": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "commit_hash",
            "source": {
                "start": 83,
                "length": 4,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:5259ccdb2dfbc9762546762dbcced2a046092c008fefbc5d16222671691fb4e2",
                "end": 87
            }
        },
        "commits": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                },
                "n": {
                    "value": 10,
                    "type": "int"
                },
                "features": {
                    "value": [
                        "date",
                        "additions",
                        "deletions"
                    ],
                    "type": "list"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'pandas.core.frame.DataFrame'>"
            },
            "docs": "\n        Get a DataFrame of commits with comment, time, and number of additions/deletions.\n        \n        Args:\n            path: Path to the git repository. Defaults to self.path.\n            n: Number of commits to retrieve. Defaults to 10.\n            \n        Returns:\n            pandas DataFrame with commit information.\n        ",
            "cost": 1,
            "name": "commits",
            "source": {
                "start": 112,
                "length": 117,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:91ae5510531e9807d41f49ffc7124802616c5b750c8f9a5ddb4746839819a34f",
                "end": 229
            }
        },
        "dff": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "./",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "dff",
            "source": {
                "start": 282,
                "length": 13,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:b1a27df62f327fb886ba4bec92a9f0084c72a5ae5593b82fe72eb8ca0ca8e9b3",
                "end": 295
            }
        },
        "diff": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                },
                "relative": {
                    "value": false,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Get the diff of files in a git repository.\n        \n        Args:\n            path: Path to the git repository. Defaults to self.path.\n            relative: If True, returns relative paths. If False, returns absolute paths.\n            \n            \n        Returns:\n            Dictionary mapping file paths to their diffs.\n        ",
            "cost": 1,
            "name": "diff",
            "source": {
                "start": 250,
                "length": 32,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:c4a802c2c879198632e226636e903a4b839882c45dd087a397d4960baf2378fd",
                "end": 282
            }
        },
        "get_info": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                },
                "name": {
                    "value": null,
                    "type": "NoneType"
                },
                "n": {
                    "value": 10,
                    "type": "int"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_info",
            "source": {
                "start": 88,
                "length": 23,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:d33b6958efb6d2d9f4b7ae5cc87fbcc11d6e5573545532d14a5bca10d99cbfb2",
                "end": 111
            }
        },
        "get_path": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_path",
            "source": {
                "start": 78,
                "length": 4,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:aeafee9663c9e621a89691090802a00a27439bc23aa91d965bf4ec88d33fe1d3",
                "end": 82
            }
        },
        "git_repos": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "./",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "git_repos",
            "source": {
                "start": 46,
                "length": 11,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:cbcfefbd9ae5f125c1c4e8486236d5542731a6cbe14f2165fa2f43bcd321a6fe",
                "end": 57
            }
        },
        "gitpath": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'str'>"
            },
            "docs": "\n        find the github url of a module\n        ",
            "cost": 1,
            "name": "gitpath",
            "source": {
                "start": 230,
                "length": 10,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:3f26678b3f0a26757540787e2b9d8d30465c21b45d6c9467e6589c7d93c4a5af",
                "end": 240
            }
        },
        "giturl": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "url": {
                    "value": "commune-ai/commune",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "giturl",
            "source": {
                "start": 241,
                "length": 8,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:a87a7d213839c2ba307ab2e16a9b32bdad24acdce3f13a71ade649e0d77b7f97",
                "end": 249
            }
        },
        "hash": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "hash",
            "source": {
                "start": 62,
                "length": 3,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:1031d9cbbe9b1d36abfac126cd5767eca59138b037cae9c94341e45fe177d28c",
                "end": 65
            }
        },
        "history": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        a history ofo the commits and the times\n        ",
            "cost": 1,
            "name": "history",
            "source": {
                "start": 66,
                "length": 7,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:f4b60899cd504f0d0ab40f77cf480d1cb8f3d775319a662059c3d92eafc8e4bf",
                "end": 73
            }
        },
        "init_repo": {
            "input": {
                "repo_path": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "user_name": {
                    "value": null,
                    "type": "NoneType"
                },
                "user_email": {
                    "value": null,
                    "type": "NoneType"
                },
                "initial_branch": {
                    "value": "main",
                    "type": "str"
                },
                "verbose": {
                    "value": false,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'str'>"
            },
            "docs": "\n        Initialize a Git repository with optional configuration.\n        \n        Args:\n            repo_path (str): Path where the Git repository should be initialized\n            user_name (str, optional): Git user name for this repository\n            user_email (str, optional): Git user email for this repository\n            initial_branch (str, optional): Name of the initial branch\n            verbose (bool): Whether to print command output\n            \n        Returns:\n            str: Command output\n        ",
            "cost": 1,
            "name": "init_repo",
            "source": {
                "start": 300,
                "length": 43,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:bced75286b0d66f529177efb178d25e23ea222db90cb44fb4e40f3a16aac956d",
                "end": 343
            }
        },
        "is_repo": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "is_repo",
            "source": {
                "start": 13,
                "length": 3,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:da1014a30fe4c15501e75c7e41bcb13bed90a56c8fdfb5f472860ff75e6ef2cd",
                "end": 16
            }
        },
        "push": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                },
                "msg": {
                    "value": "update",
                    "type": "str"
                },
                "safety": {
                    "value": true,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "push",
            "source": {
                "start": 17,
                "length": 13,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:58f5fdeae8285a92edd24e987c28f66cf0c999966c067a0725e2b194b5b91492",
                "end": 30
            }
        },
        "repo_url": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'str'>"
            },
            "docs": null,
            "cost": 1,
            "name": "repo_url",
            "source": {
                "start": 58,
                "length": 3,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:1e15016b6a656bd6166c4a2a3ca6c5d02078f6fbd3c202390af8d8dbe4edf1f9",
                "end": 61
            }
        },
        "reset_hard": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "reset_hard",
            "source": {
                "start": 74,
                "length": 3,
                "path": "~/commune/commune/modules/git/src/git.py",
                "code": null,
                "hash": "sha256:f63cf7ba57468ef81310fe3d9e4e8988869bb1889be28c18fb6a521ed3538e15",
                "end": 77
            }
        }
    },
    "name": "git",
    "key": "5HYANVX7jcMruzXi8oMZqDCQSVGBE4HvN63vdioPQS6HjDZD",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:513bbf32ba70202dfe131c13665d32b17d5a68f77df32f535b13acfeaaf372e3",
    "time": 1746536219.6792982,
    "signature": "0xba189f808bca3196f62de4046034643e3ecfa62e2a75666fe425f66991c0eb34a55d898abffe8e07b1d2c4ce8cb3aeb1ab472e1af5d229c0c37ee87a9149ba8c"
}