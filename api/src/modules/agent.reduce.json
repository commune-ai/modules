{
    "code": {
        "agent/reduce.py": " \n    \n\n\nimport os\nimport json\nimport commune as c\n\n\nclass Reduce:\n    def __init__(self, agent='agent'):\n        self.agent = c.module(agent)()\n    def forward(self, text, max_chars=10000 , timeout=40, max_age=30, model='openai/o1-mini'):\n        if os.path.exists(text): \n            path = text\n            if os.path.isdir(path):\n                print('REDUCING A DIRECTORY -->', path)\n                future2path = {}\n                path2result = {}\n                paths = c.files(path)\n                progress = c.tqdm(len(paths), desc='Reducing', leave=False)\n                while len(paths) > 0:\n                    for p in paths:\n                        future = c.submit(self.reduce, [p], timeout=timeout)\n                        future2path[future] = p\n                    try:\n                        for future in c.as_completed(future2path, timeout=timeout):\n                            p = future2path[future]\n                            r = future.result()\n                            paths.remove(p)\n                            path2result[p] = r\n                            print('REDUCING A FILE -->', r)\n                            progress.update(1)\n                    except Exception as e:\n                        print(e)\n                return path2result\n            else:\n                assert os.path.exists(path), f'Path {path} does not exist'\n                print('REDUCING A FILE -->', path)\n                text = str(c.get_text(path))\n        elif c.module_exists(text):\n            text = c.code(text)\n\n        original_length = len(text)\n        code_hash = c.hash(text)\n        path = f'summary/{code_hash}' \n\n        text = f'''\n        GOAL\n        summarize the following into tupples and make sure you compress as much as oyu can\n        CONTEXT\n        {text}\n        OUTPUT FORMAT ONLY BETWEEN THE TAGS SO WE CAN PARSE\n        <OUTPUT>DICT(data=List[Dict[str, str]])</OUTPUT>\n        '''\n        if len(text) >= max_chars * 2 :\n            batch_text = [text[i:i+max_chars] for i in range(0, len(text), max_chars)]\n            futures =  [c.submit(self.reduce, [batch], timeout=timeout) for batch in batch_text]\n            output = ''\n            try:\n                for future in c.as_completed(futures, timeout=timeout):\n                    output += str(future.result())\n            except Exception as e:\n                print(e)\n            final_length = len(text)\n            result = { 'compress_ratio': final_length/original_length, \n                      'final_length': final_length, \n                      'original_length': original_length, \n                      \"data\": text}\n            return result\n        if \"'''\" in text:\n            text = text.replace(\"'''\", '\"\"\"')\n        \n        data =  c.ask(text, model=model, stream=0)\n        def process_data(data):\n            try:\n                data = data.split('<OUTPUT>')[1].split('</OUTPUT>')[0]\n                return data\n            except:\n                return data\n        return {\"data\": process_data(data)}\n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "text": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "max_chars": {
                    "value": 10000,
                    "type": "int"
                },
                "timeout": {
                    "value": 40,
                    "type": "int"
                },
                "max_age": {
                    "value": 30,
                    "type": "int"
                },
                "model": {
                    "value": "openai/o1-mini",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 13,
                "length": 69,
                "path": "~/commune/commune/modules/agent/agent/reduce.py",
                "code": null,
                "hash": "sha256:2c1445249bb77d268a843c3b45c92ecbbb3c6fb02923a8a7d1eb379e838d1047",
                "end": 82
            }
        }
    },
    "name": "agent.reduce",
    "key": "5GizzKEXoakAgoS3QdXv3ixTeui2cLHWnJH71fAYkgUuMtYA",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:4318b022713217da366b1be19cdb40b429b5df9517bc91ab2593cadf7d620751",
    "time": 1746536203.55407,
    "signature": "0xce2781977613d33906686f822631f6427b6e44dbf39eda37e34589632931b70136cb76a897853c02a7f9ecb677bf545e7c839fd9a5e7018f92612911029a3f85"
}