{
    "code": {
        "create_file.py": "\nimport commune as c\nimport os\nfrom typing import Dict, Any, Optional, Union\nfrom ..utils import abspath, put_text, ensure_directory_exists\n\nclass CreateFile:\n    \"\"\"\n    A utility tool for creating new files at specified paths.\n    \n    This class provides functionality to:\n    - Create new files with specified content\n    - Ensure parent directories exist\n    - Handle different file types appropriately\n    - Provide feedback on the operation\n    \"\"\"\n    \n    def __init__(self, **kwargs):\n        \"\"\"\n        Initialize the CreateFile tool.\n        \n        Args:\n            **kwargs: Additional configuration parameters\n        \"\"\"\n        pass\n    \n    def forward(self, \n                file_path: str, \n                content: str = \"\",\n                create_parent_dirs: bool = True,\n                overwrite: bool = False,\n                verbose: bool = True) -> Dict[str, Any]:\n        \"\"\"\n        Create a new file at the specified path with the given content.\n        \n        Args:\n            file_path: Path where the file should be created\n            content: Content to write to the file\n            create_parent_dirs: Whether to create parent directories if they don't exist\n            overwrite: Whether to overwrite the file if it already exists\n            verbose: Print detailed information about the operation\n            \n        Returns:\n            Dictionary with operation results including:\n            - success: Whether the operation was successful\n            - file_path: Path to the created file\n            - message: Description of the operation result\n        \"\"\"\n        file_path = abspath(file_path)\n        \n        # Check if file already exists\n        if os.path.exists(file_path) and not overwrite:\n            if verbose:\n                c.print(f\"File already exists: {file_path}\", color=\"yellow\")\n            return {\n                \"success\": False,\n                \"file_path\": file_path,\n                \"message\": f\"File already exists and overwrite is False\"\n            }\n        \n        # Create parent directories if needed\n        parent_dir = os.path.dirname(file_path)\n        if create_parent_dirs and parent_dir and not os.path.exists(parent_dir):\n            try:\n                ensure_directory_exists(parent_dir)\n                if verbose:\n                    c.print(f\"Created parent directory: {parent_dir}\", color=\"blue\")\n            except Exception as e:\n                if verbose:\n                    c.print(f\"Failed to create parent directory: {str(e)}\", color=\"red\")\n                return {\n                    \"success\": False,\n                    \"file_path\": file_path,\n                    \"message\": f\"Failed to create parent directory: {str(e)}\"\n                }\n        \n        # Write content to file\n        try:\n            put_text(file_path, content)\n            if verbose:\n                c.print(f\"Successfully created file: {file_path}\", color=\"green\")\n            return {\n                \"success\": True,\n                \"file_path\": file_path,\n                \"message\": \"File created successfully\"\n            }\n        except Exception as e:\n            if verbose:\n                c.print(f\"Failed to create file: {str(e)}\", color=\"red\")\n            return {\n                \"success\": False,\n                \"file_path\": file_path,\n                \"message\": f\"Failed to create file: {str(e)}\"\n            }\n    \n    \n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "file_path": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "content": {
                    "value": "",
                    "type": "str"
                },
                "create_parent_dirs": {
                    "value": true,
                    "type": "bool"
                },
                "overwrite": {
                    "value": false,
                    "type": "bool"
                },
                "verbose": {
                    "value": true,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Dict[str, typing.Any]"
            },
            "docs": "\n        Create a new file at the specified path with the given content.\n        \n        Args:\n            file_path: Path where the file should be created\n            content: Content to write to the file\n            create_parent_dirs: Whether to create parent directories if they don't exist\n            overwrite: Whether to overwrite the file if it already exists\n            verbose: Print detailed information about the operation\n            \n        Returns:\n            Dictionary with operation results including:\n            - success: Whether the operation was successful\n            - file_path: Path to the created file\n            - message: Description of the operation result\n        ",
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 27,
                "length": 68,
                "path": "~/commune/commune/modules/dev/src/dev/tool/create_file.py",
                "code": null,
                "hash": "sha256:98263d8910b9739fe57059ea80dd29236ee1e27663d881b1906ef606f7126622",
                "end": 95
            }
        }
    },
    "name": "dev.tool.create_file",
    "key": "5HK1wevbR7FPRJig6D8qKDZNuwBvFxtGCNqfVqiJHn99w3uK",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:142fafde4e496c5034944493b0a00d31ac339ff495973d56d174dc159cbd8a1b",
    "time": 1746536300.8905568,
    "signature": "0xa2bf416dea5c9fa491be601afafec15f9b9fbed5f3fb5ee3034b92ccdbd27c33111fea04f5e78b072dd8fab0735f97747ac149bb5f1c3d448bae042315554383"
}