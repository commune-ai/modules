{
    "code": {
        "ctx/select.py": "\nimport commune as c\nimport json\nimport os\n\n\n\nclass Selector:\n\n    def forward(self,  \n              options: list[str] = [],  \n              query='most relevant', \n              n=10,  \n              trials = 3,\n              min_score=0,\n              max_score=9,\n              threshold=5,\n              model='anthropic/claude-3.5-sonnet',\n              context = None):\n\n        model = model or self.model\n        if trials > 0 :\n            try:\n                return self.forward(options=options, query=query, n=n, trials=trials-1, threshold=threshold, context=context, model=model)\n            except Exception as e:\n                print(e)\n                if trials == 0:\n                    raise e\n                else:\n                    return self.forward(options=options, query=query,  n=n, trials=trials-1, threshold=threshold, context=context, model=model)\n        anchors = [f\"<START_JSON>\", f\"</END_JSON>\"]\n        if isinstance(options, dict):\n            options  = list(options.keys())\n        idx2options = {i:option for i, option in enumerate(options)}\n        prompt = f\"\"\"\n        --QUERY--\n        {query}\n        CONTEXT{context}\n        --OPTIONS--\n        {idx2options} \n        --RULES--\n        only output the IDX:int  and score OF AT MOST {n}\n        BUT YOU DONT NEED TO FOR SIMPLICITY TO NOT RETURN WITH COMMENTS\n        MIN_SCORE:{min_score}\n        MAX_SCORE:{max_score}\n        THRESHOLD:{threshold}\n        DO NOT RETURN THE OPTIONS THAT SCORE BELOW THRESHOLD({threshold})\n        BE CONSERVATIVE WITH YOUR SCORING TO SAVE TIME\n        THE MINIMUM SCORE IS 0 AND THE MAXIMUM SCORE IS 10\n        --OUTPUT_FORMAT--\n        {anchors[0]}DICT(data:LIST[LIST[idx:INT, score:INT]]]){anchors[1]}\n        MAKE SURE YOU RETURN IT THE JSON FORMAT BETWEEN THE ANCHORS AND NOTHING ELSE TO FUCK UP \n        --OUTPUT--\n        \"\"\"\n        output = ''\n        for ch in c.ask(prompt, model=model): \n            print(ch, end='')\n            output += ch\n            if ch == anchors[1]:\n                break\n        if anchors[0] in output:\n            output = output.split(anchors[0])[1].split(anchors[1])[0]\n        else:\n            output = output\n        print(output)\n        output = json.loads(output)\n        assert len(output) > 0\n        output = [idx2options[idx] for idx, score in output['data'] if score >= threshold]\n        return output\n\n    def files(self,\n                query='the most relevant files',\n                *extra_query,\n               path='./',  \n               n=30):\n        if len(extra_query)>0:\n            query = ' '.join([query, *extra_query])\n        options = self.forward(options=c.files(path), query=query, n=n)\n        return options\n\n    def modules(self,  query='', **kwargs): \n        return self.forward(options=c.get_modules(), query=query,**kwargs)\n\n    def utils(self, query='i want something that does ls', **kwargs):\n        return self.forward(query=query, options=c.get_utils(), **kwargs)\n    \n    def search(self, query:str='how can i stake on chain', **kwargs):\n        module2schema = c.module2schema()\n        options = []\n        for module, schema in module2schema.items():\n            for fn in schema.keys():\n                options += [f\"{module}/{fn}\"]\n        context  = f'''\n        '''\n        return self.forward(query=query, options=options)\n"
    },
    "schema": {
        "files": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "query": {
                    "value": "the most relevant files",
                    "type": "str"
                },
                "extra_query": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "./",
                    "type": "str"
                },
                "n": {
                    "value": 30,
                    "type": "int"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "files",
            "source": {
                "start": 71,
                "length": 9,
                "path": "~/commune/commune/modules/ctx/ctx/select.py",
                "code": null,
                "hash": "sha256:0523625b80d97c5ff0c78d60bb28e2837c8e60d8a18a9ae5bededdc8ca191ed8",
                "end": 80
            }
        },
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "options": {
                    "value": [],
                    "type": "list"
                },
                "query": {
                    "value": "most relevant",
                    "type": "str"
                },
                "n": {
                    "value": 10,
                    "type": "int"
                },
                "trials": {
                    "value": 3,
                    "type": "int"
                },
                "min_score": {
                    "value": 0,
                    "type": "int"
                },
                "max_score": {
                    "value": 9,
                    "type": "int"
                },
                "threshold": {
                    "value": 5,
                    "type": "int"
                },
                "model": {
                    "value": "anthropic/claude-3.5-sonnet",
                    "type": "str"
                },
                "context": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 10,
                "length": 60,
                "path": "~/commune/commune/modules/ctx/ctx/select.py",
                "code": null,
                "hash": "sha256:13c3f65bbc078bbe353e03b8912f8fe1806a341b1cced3b3d5cbd01b47d9d440",
                "end": 70
            }
        },
        "modules": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "query": {
                    "value": "",
                    "type": "str"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "modules",
            "source": {
                "start": 81,
                "length": 2,
                "path": "~/commune/commune/modules/ctx/ctx/select.py",
                "code": null,
                "hash": "sha256:fd6c54a324c22610fbd6d834e1966e5a448dc53c07ff71c3d2bd6140df93fd8a",
                "end": 83
            }
        },
        "search": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "query": {
                    "value": "how can i stake on chain",
                    "type": "str"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "search",
            "source": {
                "start": 87,
                "length": 9,
                "path": "~/commune/commune/modules/ctx/ctx/select.py",
                "code": null,
                "hash": "sha256:83af6182af414849c3e2ad05f5e3fd223c3ba5b0ddf4959bcc4e3ed181fcd98a",
                "end": 96
            }
        },
        "utils": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "query": {
                    "value": "i want something that does ls",
                    "type": "str"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "utils",
            "source": {
                "start": 84,
                "length": 2,
                "path": "~/commune/commune/modules/ctx/ctx/select.py",
                "code": null,
                "hash": "sha256:9edf5e1ff210090c15174fd6219c1ba8e1bf225382159928cbc21390148d43c2",
                "end": 86
            }
        }
    },
    "name": "ctx.select",
    "key": "5FBytB9sGFudNxQPDBFD9s6zRbTPbuw34VnTAmkr7C3Kz5SV",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:d75421d5a6dcd5b4170fbf30bec67c346594d4d62f65030166080c65d5405293",
    "time": 1746536204.170054,
    "signature": "0x6e0a6e119649f419a274be66548d8be90557e60921ff615ad92e97bdc771ae075f8fd867b2c6f394dbb3090f28c7b9317e36e281522b16d7ebdbc1ce15793384"
}