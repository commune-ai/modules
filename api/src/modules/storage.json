{
    "code": {
        "storage.py": "\nimport json\nimport os\nimport time\n\nclass Storage:\n\n    def __init__(self, storage_dirpath='~/.storage', mode='json'):\n        self.storage_dirpath = self.abspath(storage_dirpath)\n        self.mode = mode\n\n    def put(self, path, data):\n        path = self.get_path(path)\n        dirpath = '/'.join(path.split('/')[:-1])\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath, exist_ok=True)\n        with open(path, 'w') as f:\n            json.dump(data, f)\n        return path\n\n    def get(self, path, default=None, max_age=None, update=False):\n        path = self.get_path(path)\n        with open(path, 'r') as f:\n            data = json.load(f)\n        if update:\n            max_age = 0\n        if max_age != None:\n            if time.time() - os.path.getmtime(path) > max_age:\n                data = default\n        return data\n\n    def get_path(self, path):\n        if not path.startswith('/'):\n            path  = f'{self.storage_dirpath}/{path}'\n            if self.mode != None:\n                if not path.endswith(f'.{self.mode}'):\n                    path = f'{path}.{self.mode}'\n        return path\n\n    def rm(self, path):\n        path = self.get_path(path)\n        assert os.path.exists(path), f'Failed to find path {path}'\n        os.remove(path)\n        return path\n\n    def items(self, df=False, features=None):\n        paths = self.paths()\n        data = []\n        for p in paths:\n            try:\n                data.append(self.get(p))\n            except Exception as e:\n                print(f'Failed to get {p} error={e}')\n        if df:\n            import pandas as pd\n            data = pd.DataFrame(data)\n        return data\n\n    def paths(self):\n        import glob\n        paths = glob.glob(f'{self.storage_dirpath}/**/*', recursive=True)\n        return [self.abspath(p) for p in paths if os.path.isfile(p)]\n\n    def exists(self, path):\n        path = self.get_path(path)\n        return os.path.exists(path)\n        \n\n    def item2age(self):\n        \"\"\"\n        returns the age of the item in seconds\n        \"\"\"\n        paths = self.paths()\n        ages = {}\n        for p in paths:\n            ages[p] = time.time() - os.path.getmtime(p)\n        return ages\n        \n    def n(self):\n        paths = self.items()\n        return len(paths)\n\n    def _rm_all(self):\n        \"\"\"\n        removes all items in the storage\n        \"\"\"\n        paths = self.paths()\n        for p in paths:\n            os.remove(p)\n        return paths\n\n    def test(self, path='test.json', data={'test': 'test', 'fam': {'test': 'test'}}):\n        t0 = time.time()\n        n0 = self.n()\n        if self.exists(path):\n            self.rm(path)\n        assert not self.exists(path), f'Failed to delete'\n        self.put('test.json', {'test': 'test'})\n        n1 = self.n()\n        assert n1 == n0 + 1, f'Failed to add item n0={n0} n1={n1}'\n        assert self.exists(path), f'Failed to find {path}'\n        data = self.get(path)\n        self.rm(path)\n        n2 = self.n()\n        assert n2 == n0, f'Failed to delete item n0={n0} n2={n2}'\n        assert not self.exists(path), f'Failed to delete {path}'\n        assert data == {'test': 'test'}, f'Failed test data={data}'\n        t1 = time.time()\n        print(f'Passed all tests in {t1 - t0} seconds')\n        return {'success': True, 'msg': 'Passed all tests'}\n\n    def abspath(self, path):\n        return os.path.abspath(os.path.expanduser(path))\n\n    def path2age(self):\n        \"\"\"\n        returns the age of the item in seconds\n        \"\"\"\n        paths = self.paths()\n        ages = {}\n        for p in paths:\n            ages[p] = time.time() - os.path.getmtime(p)\n        return ages"
    },
    "schema": {
        "abspath": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "abspath",
            "source": {
                "start": 112,
                "length": 2,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:7f69590a7fb316704d6d6403fcf876cd5b8dc8b951ed0e46c8f7f75645ef9acb",
                "end": 114
            }
        },
        "exists": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "exists",
            "source": {
                "start": 64,
                "length": 3,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:eae117c533cfb93550edabf281cc02e11931c51096942ffa22954c177cfe0772",
                "end": 67
            }
        },
        "get": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "default": {
                    "value": null,
                    "type": "NoneType"
                },
                "max_age": {
                    "value": null,
                    "type": "NoneType"
                },
                "update": {
                    "value": false,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get",
            "source": {
                "start": 21,
                "length": 10,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:6483fd52a980134d91b1730f6f60514307a3548c8ec78593b5488836fffe68b4",
                "end": 31
            }
        },
        "get_path": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_path",
            "source": {
                "start": 32,
                "length": 7,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:ea31e31b6d2a9af4d62003834d698893bc2fdd7c4bdf7c5147382d8ad18bd9dc",
                "end": 39
            }
        },
        "item2age": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        returns the age of the item in seconds\n        ",
            "cost": 1,
            "name": "item2age",
            "source": {
                "start": 69,
                "length": 9,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:8eaad8f5ae7d498c7b3da2afda78fee2b21af5a06d7077fdea89bb2ebac88684",
                "end": 78
            }
        },
        "items": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "df": {
                    "value": false,
                    "type": "bool"
                },
                "features": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "items",
            "source": {
                "start": 46,
                "length": 12,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:2816ebee8d892ad496c7a8c93ce345edd5f3bdbaca881435cc8163a732959457",
                "end": 58
            }
        },
        "n": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "n",
            "source": {
                "start": 79,
                "length": 3,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:3cc90966fd9f97d459a9e3dc57d9317a7540f9e4845bba98f51a58796d5b9c24",
                "end": 82
            }
        },
        "path2age": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        returns the age of the item in seconds\n        ",
            "cost": 1,
            "name": "path2age",
            "source": {
                "start": 115,
                "length": 9,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:01b85e79e23ab7c0df32d37312306928e8e5cfdbdbaa28a54abd292bdfad5126",
                "end": 124
            }
        },
        "paths": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "paths",
            "source": {
                "start": 59,
                "length": 4,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:02392cf8ffa74bb2311e7d50961b6fb4786cf054f841385ecd1ef62ee1f3ca8e",
                "end": 63
            }
        },
        "put": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "put",
            "source": {
                "start": 12,
                "length": 8,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:709ae8ea34d288ec20f8396426892914fed300ef7d56b47751958fe613dadbd0",
                "end": 20
            }
        },
        "rm": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "rm",
            "source": {
                "start": 40,
                "length": 5,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:e21e93eb4291d654cbd754da96af06902881a1e9f19ebdafe8834726d54a9c0b",
                "end": 45
            }
        },
        "test": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "test.json",
                    "type": "str"
                },
                "data": {
                    "value": {
                        "test": "test",
                        "fam": {
                            "test": "test"
                        }
                    },
                    "type": "dict"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test",
            "source": {
                "start": 92,
                "length": 19,
                "path": "~/commune/commune/core/storage/storage.py",
                "code": null,
                "hash": "sha256:76217ff217d3e3f7477ceca0a4f84ad94bec9e10ec937177355f4a2424991e5e",
                "end": 111
            }
        }
    },
    "name": "storage",
    "key": "5EtSs8gLx7mH4KU51LPTCpcnLAd15Po28KX14WsMwkZQduLy",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:9fc284aad3ffcd9d7fc6ebaed28dadc27cde9f368fcdadf0feb62a0880d0dbe5",
    "time": 1746536238.355581,
    "signature": "0x523555f6e9e1db97452d4dc719de98adddee15f92e47cb52be7adfbe826a3720a43d0c08daa2d22dbe83832c602384b82c430eb8ea9b830dc0c0c756d001a883"
}