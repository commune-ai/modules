{
    "code": {
        "README.md": "# Edit Module\nThe Edit module provides a powerful interface for programmatically editing files using language models.\n## Features\n- File manipulation tools (add, delete, modify lines)\n- LLM-powered code editing\n- Interactive confirmation of changes\n- Automatic file backups\n- Support for multiple language models\n## Usage\n```python\nimport commune as c\n# Initialize the Edit module\nedit = c.module('edit')\n# Make changes to a file\nresult = edit.forward(\n    text=\"your editing instruction\",\n    path=\"path/to/your/file\",\n    model=\"anthropic/claude-3.5-sonnet\"\n)\n```\n## Available Tools\n- `add_lines`: Add lines at a specific position\n- `add_lines_after`: Add content after specified text\n- `add_lines_before`: Add content before specified text\n- `add_lines_between`: Add content between two text markers\n- `add_file`: Create a new file with content\n- `delete_lines`: Remove lines from specified positions\n- `delete_file`: Delete a file or directory\n- `delete_between`: Remove content between two text markers\n## Safety Features\n- Creates automatic backups before modifications\n- Interactive confirmation for each operation\n- Validation of file changes",
        "edit.py": "# edit.py\nimport commune as c\nimport time\nimport os\nimport json\nfrom typing import Dict, Any, Union\nfrom .tools import add_file, delete_file, add_between, delete_between\nclass Edit:\n    # Anchors for parsing model output\n    fn_anchor = 'FN_CALL'\n    fn_param_anchor = 'FN_PARAM'\n    start_fn_anchor = f'<START_{fn_anchor}>'\n    end_fn_anchor = f'<END_{fn_anchor}>'\n    endpoints = [\"forward\"]\n\n    def __init__(self, \n                model = 'anthropic/claude-3.5-sonnet',\n                tools=[add_file, delete_file, add_between, delete_between]):\n        self.model = model\n        self.agent = c.module('agent')(model=self.model)\n        self.models = self.agent.models()\n        self.tools = {f.__name__: f for f in tools}\n        self.tool2schema = {f.__name__: c.fn_schema(f) for f in tools}\n\n    def forward(self,\n                text='edit the file',\n                *extra_text,\n                path='./commune',\n                task=None,\n                temperature=0.5,\n                module=None,\n                max_tokens=1000000,\n                threshold=1000000,\n                model=None,\n                write=False,\n                process_input=False,\n                stream=True):\n        \n        model = model or self.model\n        text = text + ' ' + ' '.join(list(map(str, extra_text)))\n        if module:\n            path = c.filepath(module)\n\n        if path != None:\n            context = c.text(path)\n        else:\n            context = 'No file path provided'\n        # Construct function documentation for the model\n        fn_docs = \"\\n\".join([f\"{name}: {schema}\" for name, schema in self.tool2schema.items()])\n        \n        prompt = f\"\"\"\n            ---GOAL---\n            You are an expert code editor. You will suggest changes to files using the available tools:\n            ---CONTEXT---\n            {text}\n            {context}\n            ---TOOLS---\n            {fn_docs}\n            ---OUTPUTFORMAT---\n            - Provide complete solutions\n            - Call tools in a logical sequence\n            - Each function call will be confirmed by the user\n            - make sure to add before you delete\n            MAKE SURE THE OUTPOUT JSON IS BETWEEN THE ANCHORS: \n            DO NOT MENTION THE ANCHORS WITHIN THE ANCHORS FOR PARSING\n            MAKE SURE TO PASS THE NAME OF EACH PARAM, THE TYPE AND THE VALUE UNDERNEATH\n            SEND THE KEYWORD ARGUMENTS IN THE ORDER THEY ARE DEFINED IN THE FUNCTION\n            {self.start_fn_anchor}\n            --FN_NAME--\n            add_lines\n            --{self.fn_param_anchor}/varname:str--\n            fhey\n            --{self.fn_param_anchor}/varname:int--\n            10\n            {self.end_fn_anchor}\n\n        \"\"\"\n\n\n        \n        output = self.agent.generate(prompt, \n                                   stream=stream, \n                                   model=model, \n                                   max_tokens=max_tokens, \n                                   temperature=temperature, \n                                   process_input=process_input)\n        \n        return self.process_output(output, write=write)\n\n    def parse_operation(self, fn_call_text: str) -> tuple[str, dict]:\n        \"\"\"\n        Parse function call text with improved error handling and typing.\n        \n        params:\n            fn_call_text: Raw function call text to parse\n            \n        Returns:\n            Tuple of (function_name, parameters)\n        \"\"\"\n        lines = fn_call_text.split('\\n')\n        fn_name = None\n        params = {}\n        current_key = None\n        current_type = None\n        current_value = []\n\n        try:\n            for line in lines:\n                if line.startswith('--FN_NAME--'):\n                    fn_name = next(l for l in lines[lines.index(line)+1:] if l.strip()).strip()\n                elif line.startswith(f'--{self.fn_param_anchor}/'):\n                    if current_key and current_value:\n                        params[current_key] = {'type': current_type, 'value': '\\n'.join(current_value)}\n                    # Parse key and type from format --FN_ARG\ud83d\udd11TYPE--\n                    parts = line[len(f'--{self.fn_param_anchor}/'):-2].split(':')\n                    current_key = parts[0]\n                    current_type = parts[1] if len(parts) > 1 else 'str'\n                    current_value = []\n                elif line and current_key is not None:\n                    current_value.append(line)\n\n            if current_key and current_value:\n                params[current_key] = {'type': current_type, 'value': '\\n'.join(current_value)}\n\n        except Exception as e:\n            c.print(f\"Error parsing function call: {e}\", color='red')\n            return None, {}\n        params = {\n                key: int(param['value']) if param['type'] == 'int' else param['value']\n                for key, param in params.items()\n            }\n\n        return {'fn': fn_name, 'params': params}\n\n    def execute_operation(self, op:Dict) -> Dict:\n        \"\"\"Execute a single operation with proper error handling.\"\"\"\n        fn_name = op['fn']\n        params = op['params']\n        try:\n            if fn_name not in self.tools:\n                raise ValueError(f\"Unknown function: {fn_name}\")\n            tool = self.tools[fn_name]\n            result = tool(**params)\n            return {\n                \"operation\": fn_name,\n                \"params\": params,\n                \"status\": \"success\",\n                \"result\": result\n            }\n        except Exception as e:\n            return {\n                \"operation\": fn_name,\n                \"params\": params,\n                \"status\": \"failed\",\n                \"error\": str(e)\n            }\n\n    def process_output(self, response: Union[str, iter], write: bool = False) -> Dict[str, Any]:\n        \"\"\"Process model output with improved error handling and typing.\"\"\"\n        color = c.random_color()\n        content = ''\n        ops = []\n        results = []\n\n        try:\n            for token in response:\n                content += str(token)\n                c.print(token, end='', color=color)\n\n                while self.start_fn_anchor in content and self.end_fn_anchor in content:\n                    start_idx = content.find(self.start_fn_anchor)\n                    end_idx = content.find(self.end_fn_anchor)\n                    fn_call = content[start_idx + len(self.start_fn_anchor):end_idx]\n                    op = self.parse_operation(fn_call)\n                    ops.append(op)\n                    c.print(op)\n                    content = content[end_idx + len(self.end_fn_anchor):]\n\n            if ops:\n                c.print(\"\\nProposed ops:\", color='yellow')\n                c.print(ops, color='green')\n                \n                if input(\"\\nExecute all ops? (y/n): \").lower() == 'y':\n                    for op in ops:\n                        c.print(f\"\\nExecuting: {op}\", color='blue')\n                        if input(\"Proceed with this operation? (y/n): \").lower() == 'y':\n                            result = self.execute_operation(op)\n                            results.append(result)\n                            failed = result['status'] == 'failed'\n                            if failed:\n                                c.print(f\"Operation failed: {result['error']}\", color='red')\n                            else:\n                                c.print(f\"Operation {result['status']}\", color='green')\n                        else:\n                            results.append({\n                                \"operation\": fn_name,\n                                \"params\": params,\n                                \"status\": \"skipped\"\n                            })\n                else:\n                    results = [{\n                        \"operation\": op[0],\n                        \"params\": op[1],\n                        \"status\": \"cancelled\"\n                    } for op in ops]\n\n        except Exception as e:\n            c.print(f\"Error processing output: {e}\", color='red')\n            results.append({\n                \"status\": \"failed\",\n                \"error\": str(e)\n            })\n\n        return {\n            'ops': ops,\n            'results': results,\n            'write': write\n        }\n",
        "test.py": "import commune as c\nclass Test(c.Module):\n    def __init__(self):\n        super().__init__()\n    \n    def test(self) -> bool:\n        \"\"\"Test the module\"\"\"\n        self.print('Testing Edit Module')\n        return True\n    \n    def get_filepath(self) -> str:\n        \"\"\"Return the full file path of this module\"\"\"\n        return __file__",
        "tools.py": "import os\nimport commune as c\ndef backup_file(path:str) -> str:\n    \"\"\"Create a backup of a file before modifying it\"\"\"\n    backup_path = path + '.bak'\n    if os.path.exists(path):\n        with open(path, 'r') as src, open(backup_path, 'w') as dst:\n            dst.write(src.read())\n        return backup_path\n    return None\ndef add_lines(path:str, start_line:int, content:str):\n    \"\"\"Add lines to a file at specified position\"\"\"\n    backup_file(path)\n    text = c.get_text(path)\n    lines = text.split('\\n')\n    lines = lines[:start_line] + [content] + lines[start_line:]\n    text = '\\n'.join(lines)\n    c.put_text(path, text)\n    assert c.get_text(path) == text, f'Failed to write to file: {path}'\n    return path\ndef add_lines_after(path:str, after_text:str, content:str):\n    \"\"\"Add lines after a piece of text in a file\"\"\"\n    backup_file(path)\n    text = c.get_text(path)\n    after_idx = text.find(after_text)\n    if after_idx == -1:\n        raise ValueError(f\"Could not find after_text: {after_text}\")\n    \n    # Insert the content after the piece of text\n    new_text = text[:after_idx + len(after_text)] + \"\\n\" + content + \"\\n\" + text[after_idx + len(after_text):]\n    c.put_text(path, new_text)\n    assert c.get_text(path) == new_text, f'Failed to write to file: {path}'\n    return path\ndef add_lines_before(path:str, before_text:str, content:str):\n    \"\"\"Add lines before a piece of text in a file\"\"\"\n    backup_file(path)\n    text = c.get_text(path)\n    before_idx = text.find(before_text)\n    if before_idx == -1:\n        raise ValueError(f\"Could not find before_text: {before_text}\")\n    \n    # Insert the content before the piece of text\n    new_text = text[:before_idx] + content + \"\\n\" + text[before_idx:]\n    c.put_text(path, new_text)\n    assert c.get_text(path) == new_text, f'Failed to write to file: {path}'\n    return path\ndef add_file(path:str, content:str):\n    \"\"\"Add a file with the specified content\"\"\"\n    with open(path, 'w') as f:\n        f.write(content)\n    return path \ndef add_between(path:str, before_text:str, after_text:str, content:str):\n    \"\"\"Add lines between two pieces of text in a file\"\"\"\n    backup_file(path)\n    text = c.get_text(path)\n    before_idx = text.find(before_text)\n    if before_idx == -1:\n        raise ValueError(f\"Could not find before_text: {before_text}\")\n    \n    after_idx = text.find(after_text, before_idx + len(before_text))\n    if after_idx == -1:\n        raise ValueError(f\"Could not find after_text: {after_text}\")\n    \n    # Insert the content between the two pieces of text\n    new_text = text[:after_idx] + \"\\n\" + content + \"\\n\" + text[after_idx:]\n    c.put_text(path, new_text)\n    assert c.get_text(path) == new_text, f'Failed to write to file: {path}'\n    return path\n        \ndef delete_lines(path:str, start_line:int, end_line:int):\n    \"\"\"Delete lines from a file between start_line and end_line\"\"\"\n    backup_file(path)\n    text = c.get_text(path)\n    lines = text.split('\\n')\n    lines = lines[:start_line] + lines[end_line:]\n    text = '\\n'.join(lines)\n    c.put_text(path, text)\n    assert c.get_text(path) == text, f'Failed to write to file: {path}'\n    return path\ndef delete_file(path:str):\n    \"\"\"Delete a file or directory\"\"\"\n    backup_file(path)\n    if os.path.exists(path):\n        if os.path.isdir(path):\n            os.rmdir(path)\n        else:\n            os.remove(path)\n        return True\n    return False\ndef delete_between(path:str, before_text:str, after_text:str):\n    \"\"\"Delete content between two pieces of text in a file\"\"\"\n    backup_file(path)\n    text = c.get_text(path)\n    before_idx = text.find(before_text)\n    if before_idx == -1:\n        raise ValueError(f\"Could not find before_text: {before_text}\")\n    \n    after_idx = text.find(after_text, before_idx + len(before_text))\n    if after_idx == -1:\n        raise ValueError(f\"Could not find after_text: {after_text}\")\n    \n    # Delete the content between the two pieces of text\n    new_text = text[:before_idx + len(before_text)] + text[after_idx:]\n    c.put_text(path, new_text)\n    assert c.get_text(path) == new_text, f'Failed to write to file: {path}'\n    return path"
    },
    "schema": {
        "execute_operation": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "op": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Dict"
            },
            "docs": "Execute a single operation with proper error handling.",
            "cost": 1,
            "name": "execute_operation",
            "source": {
                "start": 135,
                "length": 22,
                "path": "~/commune/commune/modules/edit/edit.py",
                "code": null,
                "hash": "sha256:d12865e36d1eb076e7d785428ddb8ecbac65d8fb478dc73b124cd1cec2445900",
                "end": 157
            }
        },
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "text": {
                    "value": "edit the file",
                    "type": "str"
                },
                "extra_text": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "./commune",
                    "type": "str"
                },
                "task": {
                    "value": null,
                    "type": "NoneType"
                },
                "temperature": {
                    "value": 0.5,
                    "type": "float"
                },
                "module": {
                    "value": null,
                    "type": "NoneType"
                },
                "max_tokens": {
                    "value": 1000000,
                    "type": "int"
                },
                "threshold": {
                    "value": 1000000,
                    "type": "int"
                },
                "model": {
                    "value": null,
                    "type": "NoneType"
                },
                "write": {
                    "value": false,
                    "type": "bool"
                },
                "process_input": {
                    "value": false,
                    "type": "bool"
                },
                "stream": {
                    "value": true,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 25,
                "length": 64,
                "path": "~/commune/commune/modules/edit/edit.py",
                "code": null,
                "hash": "sha256:961df3ebbd2496034fec337f57d990bedffed189a099aa70997fe62bf46edfad",
                "end": 89
            }
        },
        "parse_operation": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "fn_call_text": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "tuple[str, dict]"
            },
            "docs": "\n        Parse function call text with improved error handling and typing.\n        \n        params:\n            fn_call_text: Raw function call text to parse\n            \n        Returns:\n            Tuple of (function_name, parameters)\n        ",
            "cost": 1,
            "name": "parse_operation",
            "source": {
                "start": 90,
                "length": 44,
                "path": "~/commune/commune/modules/edit/edit.py",
                "code": null,
                "hash": "sha256:266ef5486d475e1c43ab609165a3e49ee79f3684a2b20a3cb179e8e874605d87",
                "end": 134
            }
        },
        "process_output": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "response": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "write": {
                    "value": false,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Dict[str, typing.Any]"
            },
            "docs": "Process model output with improved error handling and typing.",
            "cost": 1,
            "name": "process_output",
            "source": {
                "start": 158,
                "length": 61,
                "path": "~/commune/commune/modules/edit/edit.py",
                "code": null,
                "hash": "sha256:b6a8cb2967a0496403782dd0ef8cc0d6b6b19190bc1f5d00b7578d544b995f3a",
                "end": 219
            }
        }
    },
    "name": "edit",
    "key": "5GZQLotSRc9X2F7c6WxEEngHB7gHj9Jfh3RgUqSUBWYkAbLW",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:13706b771894e813ce40634cbd02208047e447eed53f04555f61fc1c60b5fbfa",
    "time": 1746536217.352774,
    "signature": "0x10c709b34fcc02d4a1905a2b1ae7be51663fcd0c4e9117b7c12e417c23545b1732b6cf23139b14a48c420185cd3e0ac68ce9aebc2f6709390bc05bf8e3d97889"
}