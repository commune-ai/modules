{
    "code": {
        "auth.py": "import commune as c\nimport time\n\nclass Auth:\n\n    data_features=['data', 'time']\n\n    def get_headers(self, data='fam', key=None, content_type='application/json', crypto_type='ecdsa'):\n        key = c.get_key(key, crypto_type=crypto_type)\n        headers_data = {'data': c.hash(data), 'time': str(time.time())}\n        headers = {k: headers_data[k] for k in self.data_features}\n        headers['signature'] = key.sign(headers_data, mode='str')\n        headers['crypto_type'] = crypto_type\n        headers['key'] = key.key_address\n        return headers\n\n    def verify_headers(self, headers:dict, data=None, max_staleness=10):\n        signature = headers['signature']\n        headers_data = {k: str(headers[k]) for k in self.data_features}\n        if data:\n            assert c.hash(data) == headers['data'], f'InvalidDataHash({c.hash(data)} != {headers[\"data\"]})'\n        staleness = c.time() - float(headers['time'])\n        headers['time'] = float(headers['time'])\n        assert isinstance(headers, dict), f'Headers must be a dict, not {type(headers)}'\n        assert  staleness < max_staleness, f\"Request is too old ({staleness}s > {max_staleness}s (MAX)\" \n        assert c.verify(headers_data, signature, address=headers['key'], crypto_type=headers['crypto_type']), f'InvalidSignature'\n        return headers\n\n\n    def test(self,crypto_type='sr25519'):\n        results = {}\n        for crypto_type in ['ecdsa', 'sr25519']:\n            data = {'fn': 'test', 'params': {'a': 1, 'b': 2}}\n            headers = self.get_headers(data, crypto_type=crypto_type)\n            verified = self.verify_headers(headers)\n            results[crypto_type] = {'headers': headers, 'verified': verified}\n        return results\n        ",
        "base.py": "import commune as c\nimport time\n\nclass Auth:\n\n    data_features=['data', 'time']\n\n    def get_headers(self, data='fam', key=None, content_type='application/json', crypto_type='ecdsa'):\n        key = c.get_key(key, crypto_type=crypto_type)\n        headers_data = {'data': c.hash(data), 'time': str(time.time())}\n        headers = {k: headers_data[k] for k in self.data_features}\n        headers['signature'] = key.sign(headers_data, mode='str')\n        headers['crypto_type'] = crypto_type\n        headers['key'] = key.key_address\n        return headers\n\n    def verify_headers(self, headers:dict, data=None, max_staleness=10):\n        signature = headers['signature']\n        headers_data = {k: str(headers[k]) for k in self.data_features}\n        if data:\n            assert c.hash(data) == headers['data'], f'InvalidDataHash({c.hash(data)} != {headers[\"data\"]})'\n        staleness = c.time() - float(headers['time'])\n        headers['time'] = float(headers['time'])\n        assert isinstance(headers, dict), f'Headers must be a dict, not {type(headers)}'\n        assert  staleness < max_staleness, f\"Request is too old ({staleness}s > {max_staleness}s (MAX)\" \n        assert c.verify(headers_data, signature, address=headers['key'], crypto_type=headers['crypto_type']), f'InvalidSignature'\n        return headers\n\n\n    def test_headers(self,crypto_type='sr25519'):\n        results = {}\n        for crypto_type in ['ecdsa', 'sr25519']:\n            data = {'fn': 'test', 'params': {'a': 1, 'b': 2}}\n            headers = self.get_headers(data, crypto_type=crypto_type)\n            verified = self.verify_headers(headers)\n            results[crypto_type] = {'headers': headers, 'verified': verified}\n        return results\n\n\n\n\n    def test(self,crypto_type='sr25519'):\n        results = {}\n        for crypto_type in ['ecdsa', 'sr25519']:\n            data = {'fn': 'test', 'params': {'a': 1, 'b': 2}}\n            headers = self.get_headers(data, crypto_type=crypto_type)\n            verified = self.verify_headers(headers)\n            results[crypto_type] = {'headers': headers, 'verified': verified}\n        return results\n        ",
        "jwt.py": "import base64\nimport hmac\nimport json\nimport time\nfrom typing import Dict, Optional, Any\n\nimport commune as c\n\nclass JWT:\n\n    def get_headers(self, data: Any, key:str=None, crypto_type='ecdsa', mode='dict') -> dict:\n        \"\"\"\n        Generate the headers with the JWT token\n        \"\"\"\n        headers =  self.get_token(c.hash(data), key=key, crypto_type=crypto_type, mode=mode)\n        return headers\n\n    def verify_headers(self, headers: str, data:Optional[Any]=None) -> Dict:\n        \"\"\"\n        Verify and decode a JWT token\n        \"\"\"\n        verified = self.verify_token(headers['token'])\n        assert verified, 'Invalid signature'\n        if data != None:\n            assert verified['data'] == c.hash(data), 'Invalid data {} != {}'.format(verified['data'], c.hash(data))\n        return verified\n\n    def check_crypto_type(self, crypto_type):\n        assert crypto_type in ['ecdsa', 'sr25519'], f'Invalid crypto_type {crypto_type}'\n\n    def get_token(self, data: Dict='hey',  key:Optional[str]=None,   crypto_type: str = 'ecdsa', expiration: int = 3600, mode='bytes') -> str:\n        \"\"\"\n        Generate a JWT token with the given data\n        Args:\n            data: Dictionary containing the data to encode in the token\n            expiration: Optional custom expiration time in seconds\n        Returns:\n            JWT token string\n        \"\"\"\n        if isinstance(key, str) or key == None:\n            key = c.get_key(key, crypto_type=crypto_type)\n        else:\n            key = key\n            if crypto_type != key.get_crypto_type(key.crypto_type):\n                crypto_type = key.get_crypto_type(key.crypto_type)\n\n        self.check_crypto_type(crypto_type)\n        if not isinstance(data, dict):\n            data = {'data': data }\n        token_data = data.copy()        \n        # Add standard JWT claims\n        token_data.update({\n            'iat': str(float(c.time())),  # Issued at time\n            'exp': str(float(c.time() + expiration)),  # Expiration time\n            'iss': key.key_address,  # Issuer (key address)\n        })\n        header = {\n            'alg': crypto_type,\n            'typ': 'JWT',\n        }\n        # Create message to sign\n        message = f\"{self._base64url_encode(header)}.{self._base64url_encode(token_data)}\"\n        # For asymmetric algorithms, use the key's sign method\n        signature = key.sign(message, mode='bytes')\n        signature_encoded = self._base64url_encode(signature)\n        # Combine to create the token\n        token = f\"{message}.{signature_encoded}\"\n        if mode == 'dict':\n            return self.verify_token(token)\n        elif mode == 'bytes':\n            return f\"{message}.{signature_encoded}\"\n        else:\n            raise ValueError(f\"Invalid mode: {mode}. Use 'bytes' or 'dict'.\")\n            \n    def verify_token(self, token: str) -> Dict:\n        \"\"\"\n        Verify and decode a JWT token\n        \"\"\"\n        if isinstance(token, dict) and 'token' in token:\n            token = token['token']\n        # Split the token into parts\n        header_encoded, data_encoded, signature_encoded = token.split('.')\n        # Decode the data\n        data = json.loads(self._base64url_decode(data_encoded))\n        headers = json.loads(self._base64url_decode(header_encoded))\n        # Check if token is expired\n        if 'exp' in data and float(data['exp']) < c.time():\n            raise Exception(\"Token has expired\")\n        # Verify signature\n        message = f\"{header_encoded}.{data_encoded}\"\n        signature = self._base64url_decode(signature_encoded)\n        assert c.verify(data=message, signature=signature, address=data['iss'], crypto_type=headers['alg']), \"Invalid token signature\"\n        # data['data'] = message\n        data['time'] = data['iat'] # set time field for semanitcally easy people\n        data['signature'] = '0x'+signature.hex()\n        data['alg'] = headers['alg']\n        data['typ'] = headers['typ']\n        data['token'] = token\n        data['key'] = data['iss']\n        return data\n\n    def _base64url_encode(self, data):\n        \"\"\"Encode data in base64url format\"\"\"\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        elif isinstance(data, dict):\n            data = json.dumps(data, separators=(',', ':')).encode('utf-8')\n        encoded = base64.urlsafe_b64encode(data).rstrip(b'=')\n        return encoded.decode('utf-8')\n    \n    def _base64url_decode(self, data):\n        \"\"\"Decode base64url data\"\"\"\n        padding = b'=' * (4 - (len(data) % 4))\n        return base64.urlsafe_b64decode(data.encode('utf-8') + padding)\n\n    def test_token(self, test_data = {'fam': 'fam', 'admin': 1} , crypto_type='ecdsa'):\n        \"\"\"\n        Test the JWT token functionality\n        \n        Returns:\n            Dictionary with test results\n        \"\"\"\n        # Generate a token\n        token = self.get_token(test_data, crypto_type=crypto_type)\n        # Verify the token\n        decoded = self.verify_token(token)\n        # Check if original data is in the decoded data\n        validation_passed = all(test_data[key] == decoded[key] for key in test_data)\n        assert validation_passed, \"Decoded data does not match original data\"\n        # Test token expiration\n        quick_token = self.get_token(test_data, expiration=0.1, crypto_type=crypto_type)\n        time.sleep(0.2)  # Wait for token to expire\n        \n        expired_token_caught = False\n        try:\n            decoded = self.verify_token(quick_token)\n        except Exception as e:\n            expired_token_caught = True\n        assert expired_token_caught, \"Expired token not caught\"\n        \n        return {\n            \"token\": token,\n            \"decoded_data\": decoded,\n            \"crypto_type\": crypto_type,\n            \"quick_token\": quick_token,\n            \"expired_token_caught\": expired_token_caught\n            }\n\n    def test_headers(self, key='test.jwt', crypto_type='ecdsa'):\n        data = {'fn': 'test', 'params': {'a': 1, 'b': 2}}\n        headers = self.get_headers(data, key=key, crypto_type=crypto_type)\n        verified = self.verify_headers(headers)\n        verified = self.verify_headers(headers, data=data)\n        return {'headers': headers, 'verified': verified}\n\n    def test(self):\n        return {\n            'token': self.test_token(),\n            'headers': self.test_headers()\n        }"
    },
    "schema": {
        "get_headers": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data": {
                    "value": "fam",
                    "type": "str"
                },
                "key": {
                    "value": null,
                    "type": "NoneType"
                },
                "content_type": {
                    "value": "application/json",
                    "type": "str"
                },
                "crypto_type": {
                    "value": "ecdsa",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_headers",
            "source": {
                "start": 8,
                "length": 8,
                "path": "~/commune/commune/modules/auth/auth.py",
                "code": null,
                "hash": "sha256:b8d5cd341fee46b22632fa3d4b9d6993d117fd3180bb09486ca91e2cc3fe514f",
                "end": 16
            }
        },
        "test": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "crypto_type": {
                    "value": "sr25519",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test",
            "source": {
                "start": 30,
                "length": 8,
                "path": "~/commune/commune/modules/auth/auth.py",
                "code": null,
                "hash": "sha256:a50de161c74e1c2b22b6c73bea2fc27f027de1c936cd574c36a99911e32c4ca5",
                "end": 38
            }
        },
        "verify_headers": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "headers": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data": {
                    "value": null,
                    "type": "NoneType"
                },
                "max_staleness": {
                    "value": 10,
                    "type": "int"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "verify_headers",
            "source": {
                "start": 17,
                "length": 11,
                "path": "~/commune/commune/modules/auth/auth.py",
                "code": null,
                "hash": "sha256:107bd852103663674a26a74381ddaeae4550fec0e68380be7e2995d1a66f1953",
                "end": 28
            }
        }
    },
    "name": "auth",
    "key": "5FkHkG3vRKBrD2PP7mZYhuLpE46Vg6naaCUZmbKT7Eeod2MN",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:faaa794a4dbfb2aed616a115b76d1499b8fed8cc976df0fa75bfdd26720d8a86",
    "time": 1746536204.697835,
    "signature": "0x74fd1ce83a4073c633e0e0a62fd77c75ef4f677c9b79265c847e20c843363630825f3ac3f90356ae37950da95ef38ec24aba38428f86dc4aed07edfd334f2782"
}