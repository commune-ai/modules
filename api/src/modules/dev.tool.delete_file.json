{
    "code": {
        "delete_file.py": "\nimport commune as c\nimport os\nimport shutil\nfrom typing import Dict, Any, Optional, Union\nfrom ..utils import abspath\n\nclass DeleteFile:\n    \"\"\"\n    A utility tool for deleting files and directories at specified paths.\n    \n    This class provides functionality to:\n    - Delete individual files\n    - Optionally delete directories (recursively or not)\n    - Implement safety checks before deletion\n    - Provide feedback on the operation\n    \"\"\"\n    \n    def __init__(self, **kwargs):\n        \"\"\"\n        Initialize the DeleteFile tool.\n        \n        Args:\n            **kwargs: Additional configuration parameters\n        \"\"\"\n        pass\n    \n    def forward(self, \n                path: str, \n                recursive: bool = False,\n                force: bool = False,\n                allow_dir: bool = False,\n                verbose: bool = True) -> Dict[str, Any]:\n        \"\"\"\n        Delete a file or directory at the specified path.\n        \n        Args:\n            path: Path to the file or directory to delete\n            recursive: Whether to recursively delete directories (only applies if allow_dir=True)\n            force: Whether to ignore non-existent files\n            allow_dir: Whether to allow directory deletion\n            verbose: Print detailed information about the operation\n            \n        Returns:\n            Dictionary with operation results including:\n            - success: Whether the operation was successful\n            - path: Path that was targeted for deletion\n            - message: Description of the operation result\n        \"\"\"\n        path = abspath(path)\n        \n        # Check if path exists\n        if not os.path.exists(path):\n            if force:\n                if verbose:\n                    c.print(f\"Path does not exist, but force=True: {path}\", color=\"yellow\")\n                return {\n                    \"success\": True,\n                    \"path\": path,\n                    \"message\": \"Path does not exist, but operation considered successful due to force=True\"\n                }\n            else:\n                if verbose:\n                    c.print(f\"Path does not exist: {path}\", color=\"red\")\n                return {\n                    \"success\": False,\n                    \"path\": path,\n                    \"message\": \"Path does not exist\"\n                }\n        \n        # Handle directory deletion\n        if os.path.isdir(path):\n            if not allow_dir:\n                if verbose:\n                    c.print(f\"Path is a directory but allow_dir=False: {path}\", color=\"red\")\n                return {\n                    \"success\": False,\n                    \"path\": path,\n                    \"message\": \"Path is a directory but allow_dir=False\"\n                }\n            \n            try:\n                if recursive:\n                    shutil.rmtree(path)\n                    if verbose:\n                        c.print(f\"Successfully deleted directory recursively: {path}\", color=\"green\")\n                    return {\n                        \"success\": True,\n                        \"path\": path,\n                        \"message\": \"Directory deleted recursively\"\n                    }\n                else:\n                    os.rmdir(path)\n                    if verbose:\n                        c.print(f\"Successfully deleted empty directory: {path}\", color=\"green\")\n                    return {\n                        \"success\": True,\n                        \"path\": path,\n                        \"message\": \"Empty directory deleted\"\n                    }\n            except OSError as e:\n                if not recursive and len(os.listdir(path)) > 0:\n                    if verbose:\n                        c.print(f\"Cannot delete non-empty directory without recursive=True: {path}\", color=\"red\")\n                    return {\n                        \"success\": False,\n                        \"path\": path,\n                        \"message\": \"Cannot delete non-empty directory without recursive=True\"\n                    }\n                if verbose:\n                    c.print(f\"Failed to delete directory: {str(e)}\", color=\"red\")\n                return {\n                    \"success\": False,\n                    \"path\": path,\n                    \"message\": f\"Failed to delete directory: {str(e)}\"\n                }\n        \n        # Handle file deletion\n        try:\n            os.remove(path)\n            if verbose:\n                c.print(f\"Successfully deleted file: {path}\", color=\"green\")\n            return {\n                \"success\": True,\n                \"path\": path,\n                \"message\": \"File deleted successfully\"\n            }\n        except Exception as e:\n            if verbose:\n                c.print(f\"Failed to delete file: {str(e)}\", color=\"red\")\n            return {\n                \"success\": False,\n                \"path\": path,\n                \"message\": f\"Failed to delete file: {str(e)}\"\n            }\n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "recursive": {
                    "value": false,
                    "type": "bool"
                },
                "force": {
                    "value": false,
                    "type": "bool"
                },
                "allow_dir": {
                    "value": false,
                    "type": "bool"
                },
                "verbose": {
                    "value": true,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Dict[str, typing.Any]"
            },
            "docs": "\n        Delete a file or directory at the specified path.\n        \n        Args:\n            path: Path to the file or directory to delete\n            recursive: Whether to recursively delete directories (only applies if allow_dir=True)\n            force: Whether to ignore non-existent files\n            allow_dir: Whether to allow directory deletion\n            verbose: Print detailed information about the operation\n            \n        Returns:\n            Dictionary with operation results including:\n            - success: Whether the operation was successful\n            - path: Path that was targeted for deletion\n            - message: Description of the operation result\n        ",
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 28,
                "length": 108,
                "path": "~/commune/commune/modules/dev/src/dev/tool/delete_file.py",
                "code": null,
                "hash": "sha256:e6571b148f4229f2403962508258dc03da7afa11e62cbba0d3a640dabbef5fc3",
                "end": 136
            }
        }
    },
    "name": "dev.tool.delete_file",
    "key": "5CaGpbuUB2NkqVsJjX19UKnPH3WEKuPopMCX2X8BqBM9UEMH",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:7627deb88fd7179f1a6fe7f1993fc55490b7722028d72218a01fa5e034b3b2c9",
    "time": 1746536301.051497,
    "signature": "0xc0007044f04a62919c85c9a7575dd823bd1f4492bc3d700131826f0b2204192ff652301ea8822f01ad4ea0645b0fcebc93baad1aaff98f65817ae85f467daf87"
}