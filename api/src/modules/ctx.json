{
    "code": {
        "README.md": "",
        "ctx/condense.py": "\n\nclass Compressor:\n    description = \"This module is used to find files and modules in the current directory\"\n    model='google/gemini-2.0-flash-001'\n    agent= c.module('agent')()\n    def forward(self,  text, model=model,  timeout=10, **kwargs):  \n        text = f'''\n        GOAL\n        summarize the following into tupples and make sure you compress as much as oyu can\n        CONTEXT\n        {text}\n        OUTPUT FORMAT IN JSON FORMAT ONLY BETWEEN THE ANCHORS ONLY INCLUDE PURE JSON, NO TEXT\n        <OUTPUT>JSON(data:list[])</OUTPUT>\n        '''\n        assert len(text) < 20000\n        return self.process_data(self.ask(text, model=model, stream=0))\n\n\n    def files(self, path='./',  query='the file that is the core of this folder', timeout=30):\n\n        model = self.model\n        future2file = {}\n        file2text = {}\n        for file in c.files(path):\n            try:\n                file2text[file] = c.text(file)\n                future = c.submit(self.forward, {'text': c.text(file), 'model': model, 'timeout': 10})\n            except Exception as e:\n                print(f\"Error processing {file}: {c.detailed_error(e)}\")\n                continue\n            future2file[future] = file\n        files = []\n        for future in c.as_completed(future2file, timeout=timeout):\n            file = future2file[future]\n            try:\n                data = future.result()\n                if query in data:\n                    files.append(data)\n            except Exception as e:\n                print(f\"Error processing {file}: {e}\")\n\n        return files\n    def process_data(self, data):\n        try:\n            data = data.split('<OUTPUT>')[1].split('</OUTPUT>')[0]\n            data = json.loads(data)\n            return data\n        except:\n            return c\n\n    \n    ",
        "ctx/ctx.py": "import commune as c \n\n\n\n\n\n\nimport commune as c\nimport json\nimport os\n\n\nclass Ctx:\n    \"\"\"\n    A base class that provides fundamental functionality for commune modules.\n    \"\"\"\n    def __init__(self, **kwargs):\n        \"\"\"\n        Initialize the base class with configurable parameters.\n        Args:\n            **kwargs: Arbitrary keyword arguments to configure the instance\n        \"\"\"\n        # Store configuration as a Munch object for dot notation access\n        self.model = c.module('openrouter')()\n        \n        \n    def forward(self, module: str='explain', *args, stream=1,  **kwargs):\n        \"\"\"\n        Dynamically call a method of the class.\n        Args:\n            fn_name (str): Name of the method to call\n            *args: Positional arguments to pass to the method\n            **kwargs: Keyword arguments to pass to the method\n        Returns:\n            Result of the called method\n        \"\"\"\n        return self.model.forward(f'what does this do? {c.code(module)}', stream=stream)\n\n\n    ",
        "ctx/select.py": "\nimport commune as c\nimport json\nimport os\n\n\n\nclass Selector:\n\n    def forward(self,  \n              options: list[str] = [],  \n              query='most relevant', \n              n=10,  \n              trials = 3,\n              min_score=0,\n              max_score=9,\n              threshold=5,\n              model='anthropic/claude-3.5-sonnet',\n              context = None):\n\n        model = model or self.model\n        if trials > 0 :\n            try:\n                return self.forward(options=options, query=query, n=n, trials=trials-1, threshold=threshold, context=context, model=model)\n            except Exception as e:\n                print(e)\n                if trials == 0:\n                    raise e\n                else:\n                    return self.forward(options=options, query=query,  n=n, trials=trials-1, threshold=threshold, context=context, model=model)\n        anchors = [f\"<START_JSON>\", f\"</END_JSON>\"]\n        if isinstance(options, dict):\n            options  = list(options.keys())\n        idx2options = {i:option for i, option in enumerate(options)}\n        prompt = f\"\"\"\n        --QUERY--\n        {query}\n        CONTEXT{context}\n        --OPTIONS--\n        {idx2options} \n        --RULES--\n        only output the IDX:int  and score OF AT MOST {n}\n        BUT YOU DONT NEED TO FOR SIMPLICITY TO NOT RETURN WITH COMMENTS\n        MIN_SCORE:{min_score}\n        MAX_SCORE:{max_score}\n        THRESHOLD:{threshold}\n        DO NOT RETURN THE OPTIONS THAT SCORE BELOW THRESHOLD({threshold})\n        BE CONSERVATIVE WITH YOUR SCORING TO SAVE TIME\n        THE MINIMUM SCORE IS 0 AND THE MAXIMUM SCORE IS 10\n        --OUTPUT_FORMAT--\n        {anchors[0]}DICT(data:LIST[LIST[idx:INT, score:INT]]]){anchors[1]}\n        MAKE SURE YOU RETURN IT THE JSON FORMAT BETWEEN THE ANCHORS AND NOTHING ELSE TO FUCK UP \n        --OUTPUT--\n        \"\"\"\n        output = ''\n        for ch in c.ask(prompt, model=model): \n            print(ch, end='')\n            output += ch\n            if ch == anchors[1]:\n                break\n        if anchors[0] in output:\n            output = output.split(anchors[0])[1].split(anchors[1])[0]\n        else:\n            output = output\n        print(output)\n        output = json.loads(output)\n        assert len(output) > 0\n        output = [idx2options[idx] for idx, score in output['data'] if score >= threshold]\n        return output\n\n    def files(self,\n                query='the most relevant files',\n                *extra_query,\n               path='./',  \n               n=30):\n        if len(extra_query)>0:\n            query = ' '.join([query, *extra_query])\n        options = self.forward(options=c.files(path), query=query, n=n)\n        return options\n\n    def modules(self,  query='', **kwargs): \n        return self.forward(options=c.get_modules(), query=query,**kwargs)\n\n    def utils(self, query='i want something that does ls', **kwargs):\n        return self.forward(query=query, options=c.get_utils(), **kwargs)\n    \n    def search(self, query:str='how can i stake on chain', **kwargs):\n        module2schema = c.module2schema()\n        options = []\n        for module, schema in module2schema.items():\n            for fn in schema.keys():\n                options += [f\"{module}/{fn}\"]\n        context  = f'''\n        '''\n        return self.forward(query=query, options=options)\n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "module": {
                    "value": "explain",
                    "type": "str"
                },
                "args": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "stream": {
                    "value": 1,
                    "type": "int"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Dynamically call a method of the class.\n        Args:\n            fn_name (str): Name of the method to call\n            *args: Positional arguments to pass to the method\n            **kwargs: Keyword arguments to pass to the method\n        Returns:\n            Result of the called method\n        ",
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 27,
                "length": 11,
                "path": "~/commune/commune/modules/ctx/ctx/ctx.py",
                "code": null,
                "hash": "sha256:5b3694c1e3cd9e84f23812f7f8b5b1fd64164119452e81426632b99613aca40a",
                "end": 38
            }
        }
    },
    "name": "ctx",
    "key": "5EPHrc8QWdYTP2Fw1FGobtdEWyxyoHaxPUqjU3C37JZsKVjF",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:1adfa02c5e39feb58db92bb0975d468298291707e47773517901d124965336e7",
    "time": 1746536205.4304872,
    "signature": "0x5047d4e03dbfcd4a6ee43d8d5967fd31e3c2e05676e461bab11ffab5915fe6695bfd9164cb7d247ddc24ca2738aecde6e827acc43f50e36ac0711b8a326ff785"
}