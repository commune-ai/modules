{
    "code": {
        "insert_text.py": "\nimport commune as c\nimport os\nimport re\nfrom typing import Dict, List, Union, Optional, Any\nfrom ..utils import get_text, put_text, abspath\nprint = c.print\nclass Insert:\n    \"\"\"\n    A utility tool for inserting text between specified anchor points in files.\n    \n    This class provides functionality to:\n    - Find anchor points in files\n    - Insert new content between those anchor points\n    - Replace existing content between anchor points\n    - Preserve the original file structure\n    - Handle multiple insertions in a single operation\n    \"\"\"\n    \n    def __init__(self, cache_dir: str = '~/.commune/insert_cache', **kwargs):\n        \"\"\"\n        Initialize the Insert tool.\n        \n        Args:\n            cache_dir: Directory to store cache files if needed\n            **kwargs: Additional configuration parameters\n        \"\"\"\n        self.cache_dir = abspath(cache_dir)\n        if not os.path.exists(self.cache_dir):\n            os.makedirs(self.cache_dir, exist_ok=True)\n    \n    def forward(self, \n                file_path: str, \n                new_content: str,\n                start_anchor: str,\n                end_anchor: str,\n                create_if_missing: bool = False,\n                backup: bool = True,\n                verbose: bool = True) -> Dict[str, Any]:\n        \"\"\"\n        Insert content between two anchor points in a file.\n        \n        Args:\n            file_path: Path to the target file\n            new_content: Content to insert between the anchors\n            start_anchor: Text marking the beginning of the insertion point\n            end_anchor: Text marking the end of the insertion point\n            create_if_missing: Create the file with anchors if it doesn't exist\n            backup: Create a backup of the original file before modifying\n            verbose: Print detailed information about the operation\n            \n        Returns:\n            Dictionary with operation results including:\n            - success: Whether the operation was successful\n            - file_path: Path to the modified file\n            - backup_path: Path to the backup file (if created)\n            - message: Description of the operation result\n        \"\"\"\n        file_path = abspath(file_path)\n        \n        # Check if file exists\n        if not os.path.exists(file_path):\n            if not create_if_missing:\n                if verbose:\n                    print(f\"File not found: {file_path}\", color=\"red\")\n                return {\n                    \"success\": False,\n                    \"file_path\": file_path,\n                    \"message\": f\"File not found and create_if_missing is False\"\n                }\n            else:\n                # Create new file with anchors and content\n                content = f\"{start_anchor}\\n{new_content}\\n{end_anchor}\"\n                put_text(file_path, content)\n                if verbose:\n                    print(f\"Created new file with content: {file_path}\", color=\"green\")\n                return {\n                    \"success\": True,\n                    \"file_path\": file_path,\n                    \"message\": \"Created new file with anchors and content\"\n                }\n        \n        # Read the original content\n        original_content = get_text(file_path)\n        if original_content is None:\n            if verbose:\n                print(f\"Could not read file: {file_path}\", color=\"red\")\n            return {\n                \"success\": False,\n                \"file_path\": file_path,\n                \"message\": \"Could not read file content\"\n            }\n        \n        # Create backup if requested\n        backup_path = None\n        if backup:\n            backup_path = f\"{file_path}.bak\"\n            put_text(backup_path, original_content)\n            if verbose:\n                print(f\"Created backup: {backup_path}\", color=\"blue\")\n        \n        # Find the anchor points\n        pattern = re.escape(start_anchor) + r\"(.*?)\" + re.escape(end_anchor)\n        match = re.search(pattern, original_content, re.DOTALL)\n        \n        if match:\n            # Replace content between anchors\n            new_file_content = original_content.replace(\n                f\"{start_anchor}{match.group(1)}{end_anchor}\",\n                f\"{start_anchor}\\n{new_content}\\n{end_anchor}\"\n            )\n            if verbose:\n                print(f\"Found anchors and replacing content\", color=\"green\")\n        else:\n            # Anchors not found - append to end of file\n            if verbose:\n                print(f\"Anchors not found in file, appending to end\", color=\"yellow\")\n            new_file_content = f\"{original_content}\\n\\n{start_anchor}\\n{new_content}\\n{end_anchor}\"\n        \n        # Write the modified content\n        put_text(file_path, new_file_content)\n        \n        if verbose:\n            print(f\"Successfully inserted content in: {file_path}\", color=\"green\")\n        \n        return {\n            \"success\": True,\n            \"file_path\": file_path,\n            \"backup_path\": backup_path,\n            \"message\": \"Successfully inserted content between anchors\"\n        }\n    "
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "file_path": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "new_content": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "start_anchor": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "end_anchor": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "create_if_missing": {
                    "value": false,
                    "type": "bool"
                },
                "backup": {
                    "value": true,
                    "type": "bool"
                },
                "verbose": {
                    "value": true,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Dict[str, typing.Any]"
            },
            "docs": "\n        Insert content between two anchor points in a file.\n        \n        Args:\n            file_path: Path to the target file\n            new_content: Content to insert between the anchors\n            start_anchor: Text marking the beginning of the insertion point\n            end_anchor: Text marking the end of the insertion point\n            create_if_missing: Create the file with anchors if it doesn't exist\n            backup: Create a backup of the original file before modifying\n            verbose: Print detailed information about the operation\n            \n        Returns:\n            Dictionary with operation results including:\n            - success: Whether the operation was successful\n            - file_path: Path to the modified file\n            - backup_path: Path to the backup file (if created)\n            - message: Description of the operation result\n        ",
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 32,
                "length": 100,
                "path": "~/commune/commune/modules/dev/src/dev/tool/insert_text.py",
                "code": null,
                "hash": "sha256:83cb357b6cbb0743212d9eb85b4c74c33a6e83bebb67b2b74130d9c65115d1f9",
                "end": 132
            }
        }
    },
    "name": "dev.tool.insert_text",
    "key": "5Fjq45Knac5Ubb3ywGeUA59sJMtQwibTZjhHXNGxUodozZVc",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:8bff057ec524bdb07a0577f976257cbf32bb11c3b8a78ec62b8c5319060c19ac",
    "time": 1746536302.00898,
    "signature": "0xb015e59ea67322b1664d560bb24aceb7b2073ef27672649faeaa577bbd0a4239ed9b88a0def00796fddedfd29b456fd61cd60dc656b0c504ec3c418a3ede0788"
}