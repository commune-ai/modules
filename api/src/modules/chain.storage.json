{
    "code": {
        "storage.py": "# Python Substrate Interface Library\n#\n# Copyright 2018-2023 Stichting Polkascan (Polkascan Foundation).\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.cpache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport binascii\nfrom typing import Any, Optional\n\nfrom .exceptions import StorageFunctionNotFound\nfrom scalecodec import ScaleBytes, GenericMetadataVersioned, ss58_decode\nfrom scalecodec.base import ScaleDecoder, RuntimeConfigurationObject, ScaleType\nfrom .utils.hasher import blake2_256, two_x64_concat, xxh128, blake2_128, blake2_128_concat, identity\n\n\nclass StorageKey:\n    \"\"\"\n    A StorageKey instance is a representation of a single state entry.\n\n    Substrate uses a simple key-value data store implemented as a database-backed, modified Merkle tree.\n    All of Substrate's higher-level storage abstractions are built on top of this simple key-value store.\n    \"\"\"\n\n    def __init__(\n            self, pallet: str, storage_function: str, params: list,\n            data: bytes, value_scale_type: str, metadata: GenericMetadataVersioned,\n            runtime_config: RuntimeConfigurationObject\n    ):\n        self.pallet = pallet\n        self.storage_function = storage_function\n        self.params = params\n        self.params_encoded = []\n        self.data = data\n        self.metadata = metadata\n        self.runtime_config = runtime_config\n        self.value_scale_type = value_scale_type\n        self.metadata_storage_function = None\n\n    @classmethod\n    def create_from_data(cls, data: bytes, runtime_config: RuntimeConfigurationObject,\n                         metadata: GenericMetadataVersioned, value_scale_type: str = None, pallet: str = None,\n                         storage_function: str = None) -> 'StorageKey':\n        \"\"\"\n        Create a StorageKey instance providing raw storage key bytes\n\n        Parameters\n        ----------\n        data: bytes representation of the storage key\n        runtime_config: RuntimeConfigurationObject\n        metadata: GenericMetadataVersioned\n        value_scale_type: type string of to decode result data\n        pallet: name of pallet\n        storage_function: name of storage function\n\n        Returns\n        -------\n        StorageKey\n        \"\"\"\n        if not value_scale_type and pallet and storage_function:\n            metadata_pallet = metadata.get_metadata_pallet(pallet)\n\n            if not metadata_pallet:\n                raise StorageFunctionNotFound(f'Pallet \"{pallet}\" not found')\n\n            storage_item = metadata_pallet.get_storage_function(storage_function)\n\n            if not storage_item:\n                raise StorageFunctionNotFound(f'Storage function \"{pallet}.{storage_function}\" not found')\n\n            # Process specific type of storage function\n            value_scale_type = storage_item.get_value_type_string()\n\n        return cls(\n            pallet=None, storage_function=None, params=None,\n            data=data, metadata=metadata,\n            value_scale_type=value_scale_type, runtime_config=runtime_config\n        )\n\n    @classmethod\n    def create_from_storage_function(cls, pallet: str, storage_function: str, params: list,\n                                     runtime_config: RuntimeConfigurationObject,\n                                     metadata: GenericMetadataVersioned) -> 'StorageKey':\n        \"\"\"\n        Create a StorageKey instance providing storage function details\n\n        Parameters\n        ----------\n        pallet: name of pallet\n        storage_function: name of storage function\n        params: Optional list of parameters in case of a Mapped storage function\n        runtime_config: RuntimeConfigurationObject\n        metadata: GenericMetadataVersioned\n\n        Returns\n        -------\n        StorageKey\n        \"\"\"\n        storage_key_obj = cls(\n            pallet=pallet, storage_function=storage_function, params=params,\n            data=None, runtime_config=runtime_config, metadata=metadata, value_scale_type=None\n        )\n\n        storage_key_obj.generate()\n\n        return storage_key_obj\n\n    def convert_storage_parameter(self, scale_type: str, value: Any):\n\n        if type(value) is bytes:\n            value = f'0x{value.hex()}'\n\n        if scale_type == 'AccountId':\n            if value[0:2] != '0x':\n                return '0x{}'.format(ss58_decode(value, self.runtime_config.ss58_format))\n\n        return value\n\n    def to_hex(self) -> str:\n        \"\"\"\n        Returns a Hex-string representation of current StorageKey data\n\n        Returns\n        -------\n        str\n            Hex string\n        \"\"\"\n        if self.data:\n            return f'0x{self.data.hex()}'\n\n    def generate(self) -> bytes:\n        \"\"\"\n        Generate a storage key for current specified pallet/function/params\n\n        Returns\n        -------\n        bytes\n        \"\"\"\n\n        # Search storage call in metadata\n        metadata_pallet = self.metadata.get_metadata_pallet(self.pallet)\n\n        if not metadata_pallet:\n            raise StorageFunctionNotFound(f'Pallet \"{self.pallet}\" not found')\n\n        self.metadata_storage_function = metadata_pallet.get_storage_function(self.storage_function)\n\n        if not self.metadata_storage_function:\n            raise StorageFunctionNotFound(f'Storage function \"{self.pallet}.{self.storage_function}\" not found')\n\n        # Process specific type of storage function\n        self.value_scale_type = self.metadata_storage_function.get_value_type_string()\n        param_types = self.metadata_storage_function.get_params_type_string()\n\n        hashers = self.metadata_storage_function.get_param_hashers()\n\n        storage_hash = xxh128(metadata_pallet.value['storage']['prefix'].encode()) + xxh128(self.storage_function.encode())\n\n        # Encode parameters\n        self.params_encoded = []\n        if self.params:\n            for idx, param in enumerate(self.params):\n                if type(param) is ScaleBytes:\n                    # Already encoded\n                    self.params_encoded.append(param)\n                else:\n                    param = self.convert_storage_parameter(param_types[idx], param)\n                    param_obj = self.runtime_config.create_scale_object(type_string=param_types[idx])\n                    self.params_encoded.append(param_obj.encode(param))\n\n            for idx, param in enumerate(self.params_encoded):\n                # Get hasher assiociated with param\n                try:\n                    param_hasher = hashers[idx]\n                except IndexError:\n                    raise ValueError(f'No hasher found for param #{idx + 1}')\n\n                params_key = bytes()\n\n                # Convert param to bytes\n                if type(param) is str:\n                    params_key += binascii.unhexlify(param)\n                elif type(param) is ScaleBytes:\n                    params_key += param.data\n                elif isinstance(param, ScaleDecoder):\n                    params_key += param.data.data\n\n                if not param_hasher:\n                    param_hasher = 'Twox128'\n\n                if param_hasher == 'Blake2_256':\n                    storage_hash += blake2_256(params_key)\n\n                elif param_hasher == 'Blake2_128':\n                    storage_hash += blake2_128(params_key)\n\n                elif param_hasher == 'Blake2_128Concat':\n                    storage_hash += blake2_128_concat(params_key)\n\n                elif param_hasher == 'Twox128':\n                    storage_hash += xxh128(params_key)\n\n                elif param_hasher == 'Twox64Concat':\n                    storage_hash += two_x64_concat(params_key)\n\n                elif param_hasher == 'Identity':\n                    storage_hash += identity(params_key)\n\n                else:\n                    raise ValueError('Unknown storage hasher \"{}\"'.format(param_hasher))\n\n        self.data = storage_hash\n\n        return self.data\n\n    def decode_scale_value(self, data: Optional[ScaleBytes] = None) -> ScaleType:\n        \"\"\"\n\n        Parameters\n        ----------\n        data\n\n        Returns\n        -------\n\n        \"\"\"\n\n        result_found = False\n\n        if data is not None:\n            change_scale_type = self.value_scale_type\n            result_found = True\n        elif self.metadata_storage_function.value['modifier'] == 'Default':\n            # Fallback to default value of storage function if no result\n            change_scale_type = self.value_scale_type\n            data = ScaleBytes(self.metadata_storage_function.value_object['default'].value_object)\n        else:\n            # No result is interpreted as an Option<...> result\n            change_scale_type = f'Option<{self.value_scale_type}>'\n            data = ScaleBytes(self.metadata_storage_function.value_object['default'].value_object)\n\n        # Decode SCALE result data\n        updated_obj = self.runtime_config.create_scale_object(\n            type_string=change_scale_type,\n            data=data,\n            metadata=self.metadata\n        )\n        updated_obj.decode()\n        updated_obj.meta_info = {'result_found': result_found}\n\n        return updated_obj\n\n    def __repr__(self):\n        if self.pallet and self.storage_function:\n            return f'<StorageKey(pallet={self.pallet}, storage_function={self.storage_function}, params={self.params})>'\n        elif self.data:\n            return f'<StorageKey(data=0x{self.data.hex()})>'\n        else:\n            return repr(self)\n"
    },
    "schema": {
        "convert_storage_parameter": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "scale_type": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "value": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "convert_storage_parameter",
            "source": {
                "start": 116,
                "length": 10,
                "path": "~/commune/commune/core/chain/storage.py",
                "code": null,
                "hash": "sha256:b80d4f089c3567d7f3237fa33798d2d79619ebcba2f951c9ad7d481c2a7411d9",
                "end": 126
            }
        },
        "create_from_data": {
            "input": {
                "data": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "runtime_config": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "metadata": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "value_scale_type": {
                    "value": null,
                    "type": "NoneType"
                },
                "pallet": {
                    "value": null,
                    "type": "NoneType"
                },
                "storage_function": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "StorageKey"
            },
            "docs": "\n        Create a StorageKey instance providing raw storage key bytes\n\n        Parameters\n        ----------\n        data: bytes representation of the storage key\n        runtime_config: RuntimeConfigurationObject\n        metadata: GenericMetadataVersioned\n        value_scale_type: type string of to decode result data\n        pallet: name of pallet\n        storage_function: name of storage function\n\n        Returns\n        -------\n        StorageKey\n        ",
            "cost": 1,
            "name": "create_from_data",
            "source": {
                "start": 48,
                "length": 39,
                "path": "~/commune/commune/core/chain/storage.py",
                "code": null,
                "hash": "sha256:162ef46f508d310385b0dc3b2990a44c8fde4f71099fa9f71ad1c1cf524476bf",
                "end": 87
            }
        },
        "create_from_storage_function": {
            "input": {
                "pallet": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "storage_function": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "params": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "runtime_config": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "metadata": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "StorageKey"
            },
            "docs": "\n        Create a StorageKey instance providing storage function details\n\n        Parameters\n        ----------\n        pallet: name of pallet\n        storage_function: name of storage function\n        params: Optional list of parameters in case of a Mapped storage function\n        runtime_config: RuntimeConfigurationObject\n        metadata: GenericMetadataVersioned\n\n        Returns\n        -------\n        StorageKey\n        ",
            "cost": 1,
            "name": "create_from_storage_function",
            "source": {
                "start": 88,
                "length": 27,
                "path": "~/commune/commune/core/chain/storage.py",
                "code": null,
                "hash": "sha256:e83ee543660f543609d06f8f79b2f715b4f9ef30ef5ef2005f2926ca52ea06b9",
                "end": 115
            }
        },
        "decode_scale_value": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'scalecodec.base.ScaleType'>"
            },
            "docs": "\n\n        Parameters\n        ----------\n        data\n\n        Returns\n        -------\n\n        ",
            "cost": 1,
            "name": "decode_scale_value",
            "source": {
                "start": 224,
                "length": 36,
                "path": "~/commune/commune/core/chain/storage.py",
                "code": null,
                "hash": "sha256:5c01a80f0c773575bf27eed7412efe9337883698f4dd31a09fbbcc8f14535835",
                "end": 260
            }
        },
        "generate": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'bytes'>"
            },
            "docs": "\n        Generate a storage key for current specified pallet/function/params\n\n        Returns\n        -------\n        bytes\n        ",
            "cost": 1,
            "name": "generate",
            "source": {
                "start": 139,
                "length": 84,
                "path": "~/commune/commune/core/chain/storage.py",
                "code": null,
                "hash": "sha256:6ee9d61caa19cfbd6776eeb39c29d7c3e0888ef97ad107976f576e2432067aa9",
                "end": 223
            }
        },
        "to_hex": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'str'>"
            },
            "docs": "\n        Returns a Hex-string representation of current StorageKey data\n\n        Returns\n        -------\n        str\n            Hex string\n        ",
            "cost": 1,
            "name": "to_hex",
            "source": {
                "start": 127,
                "length": 11,
                "path": "~/commune/commune/core/chain/storage.py",
                "code": null,
                "hash": "sha256:db0d36adde97a26b6482c9bb0bb8bdb1765590cfedd96f76fcf2d0d8f18da1cc",
                "end": 138
            }
        }
    },
    "name": "chain.storage",
    "key": "5HHJJwxoxMMFNwoxpQh2gjAwB8CvHwbyBS4WdqiJhPvTZYKd",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:eb6f657cbd19dad98d939f88fc538728b0165c38987a8c8ea16d1f3d802e4c11",
    "time": 1746536278.0163321,
    "signature": "0x12d4be07432f7262e116ce66dcd05df5a9e70c7286d81fc125b9def0ac16703a4f11b39ede029213d9cfcf420af8471340b49040201f0bb799dc4567d578a781"
}