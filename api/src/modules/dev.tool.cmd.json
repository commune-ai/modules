{
    "code": {
        "cmd.py": "\nimport commune as c\nimport subprocess\nimport shlex\nimport os\nfrom typing import List, Dict, Union, Optional, Any\n\nclass Cmd:\n    \"\"\"\n    Command-line execution tool for running shell commands with various options.\n    \n    This tool provides a clean interface for executing shell commands with options\n    for capturing output, handling errors, and processing results.\n    \"\"\"\n    \n    def __init__(self, cwd: str = None, shell: bool = False, env: Dict[str, str] = None):\n        \"\"\"\n        Initialize the Cmd tool.\n        \n        Args:\n            cwd: Current working directory for command execution\n            shell: Whether to use shell execution (can be a security risk)\n            env: Environment variables to set for command execution\n        \"\"\"\n        self.cwd = cwd\n        self.shell = shell\n        self.env = env\n        \n    def forward(\n        self,\n        command: Union[str, List[str]],\n        capture_output: bool = True,\n        text: bool = True,\n        check: bool = False,\n        timeout: Optional[float] = None,\n        cwd: Optional[str] = None,\n        env: Optional[Dict[str, str]] = None,\n        shell: Optional[bool] = None,\n        verbose: bool = True\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Execute a shell command and return the results.\n        \n        Args:\n            command: Command to execute (string or list of arguments)\n            capture_output: Whether to capture stdout/stderr\n            text: Whether to return strings instead of bytes\n            check: Whether to raise an exception on non-zero exit code\n            timeout: Maximum time to wait for command completion (in seconds)\n            cwd: Working directory for command execution (overrides instance setting)\n            env: Environment variables (overrides instance setting)\n            shell: Whether to use shell execution (overrides instance setting)\n            verbose: Whether to print command and output information\n            \n        Returns:\n            Dictionary containing:\n            - success: Whether the command executed successfully\n            - returncode: Exit code of the command\n            - stdout: Standard output (if captured)\n            - stderr: Standard error (if captured)\n            - command: The command that was executed\n        \"\"\"\n        # Use instance defaults if not specified\n        cwd = cwd if cwd is not None else self.cwd\n        env = env if env is not None else self.env\n        shell = shell if shell is not None else self.shell\n        \n        # Process the command\n        if isinstance(command, str) and not shell:\n            command = shlex.split(command)\n        \n        if verbose:\n            c.print(f\"Executing: {command}\", color=\"cyan\")\n        \n        try:\n            # Execute the command\n            result = subprocess.run(\n                command,\n                capture_output=capture_output,\n                text=text,\n                check=check,\n                timeout=timeout,\n                cwd=cwd,\n                env=env,\n                shell=shell\n            )\n            \n            # Prepare the result dictionary\n            output = {\n                \"success\": result.returncode == 0,\n                \"returncode\": result.returncode,\n                \"command\": command\n            }\n            \n            # Add stdout/stderr if captured\n            if capture_output:\n                output[\"stdout\"] = result.stdout\n                output[\"stderr\"] = result.stderr\n                \n                if verbose:\n                    if result.stdout:\n                        c.print(\"STDOUT:\", color=\"green\")\n                        c.print(result.stdout)\n                    if result.stderr:\n                        c.print(\"STDERR:\", color=\"red\")\n                        c.print(result.stderr)\n            \n            if verbose:\n                status = \"Success\" if output[\"success\"] else f\"Failed (code: {result.returncode})\"\n                c.print(f\"Command execution: {status}\", color=\"green\" if output[\"success\"] else \"red\")\n                \n            return output\n            \n        except subprocess.TimeoutExpired as e:\n            if verbose:\n                c.print(f\"Command timed out after {timeout} seconds\", color=\"red\")\n            return {\n                \"success\": False,\n                \"error\": \"timeout\",\n                \"command\": command,\n                \"timeout\": timeout,\n                \"message\": str(e)\n            }\n            \n        except subprocess.SubprocessError as e:\n            if verbose:\n                c.print(f\"Command execution error: {e}\", color=\"red\")\n            return {\n                \"success\": False,\n                \"error\": \"subprocess_error\",\n                \"command\": command,\n                \"message\": str(e)\n            }\n            \n        except Exception as e:\n            if verbose:\n                c.print(f\"Unexpected error: {e}\", color=\"red\")\n            return {\n                \"success\": False,\n                \"error\": \"unexpected\",\n                \"command\": command,\n                \"message\": str(e)\n            }\n    \n    def pipe(\n        self,\n        commands: List[str],\n        verbose: bool = True,\n        **kwargs\n    ) -> Dict[str, Any]:\n        \"\"\"\n        Execute a pipeline of commands, passing output from one to the next.\n        \n        Args:\n            commands: List of commands to execute in sequence\n            verbose: Whether to print command and output information\n            **kwargs: Additional arguments to pass to forward()\n            \n        Returns:\n            Dictionary with the result of the final command\n        \"\"\"\n        if not commands:\n            return {\"success\": False, \"error\": \"no_commands\", \"message\": \"No commands provided\"}\n        \n        if verbose:\n            c.print(f\"Executing pipeline of {len(commands)} commands\", color=\"cyan\")\n        \n        result = None\n        for i, cmd in enumerate(commands):\n            if verbose:\n                c.print(f\"Step {i+1}/{len(commands)}: {cmd}\", color=\"blue\")\n                \n            if result is not None and result.get(\"stdout\"):\n                # Use previous command's output as input\n                if kwargs.get(\"shell\", self.shell):\n                    cmd = f\"echo '{result['stdout']}' | {cmd}\"\n                else:\n                    # For non-shell execution, we need a different approach\n                    result = self.forward(\n                        f\"bash -c \\\"echo '{result['stdout']}' | {cmd}\\\"\",\n                        shell=True,\n                        verbose=verbose,\n                        **kwargs\n                    )\n                    continue\n                    \n            result = self.forward(cmd, verbose=verbose, **kwargs)\n            \n            if not result[\"success\"]:\n                if verbose:\n                    c.print(f\"Pipeline failed at step {i+1}\", color=\"red\")\n                break\n                \n        return result\n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "command": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "capture_output": {
                    "value": true,
                    "type": "bool"
                },
                "text": {
                    "value": true,
                    "type": "bool"
                },
                "check": {
                    "value": false,
                    "type": "bool"
                },
                "timeout": {
                    "value": null,
                    "type": "NoneType"
                },
                "cwd": {
                    "value": null,
                    "type": "NoneType"
                },
                "env": {
                    "value": null,
                    "type": "NoneType"
                },
                "shell": {
                    "value": null,
                    "type": "NoneType"
                },
                "verbose": {
                    "value": true,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Dict[str, typing.Any]"
            },
            "docs": "\n        Execute a shell command and return the results.\n        \n        Args:\n            command: Command to execute (string or list of arguments)\n            capture_output: Whether to capture stdout/stderr\n            text: Whether to return strings instead of bytes\n            check: Whether to raise an exception on non-zero exit code\n            timeout: Maximum time to wait for command completion (in seconds)\n            cwd: Working directory for command execution (overrides instance setting)\n            env: Environment variables (overrides instance setting)\n            shell: Whether to use shell execution (overrides instance setting)\n            verbose: Whether to print command and output information\n            \n        Returns:\n            Dictionary containing:\n            - success: Whether the command executed successfully\n            - returncode: Exit code of the command\n            - stdout: Standard output (if captured)\n            - stderr: Standard error (if captured)\n            - command: The command that was executed\n        ",
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 29,
                "length": 115,
                "path": "~/commune/commune/modules/dev/src/dev/tool/cmd.py",
                "code": null,
                "hash": "sha256:b464968c279ef8ea38e3db96065e1b7a409aa621abb0bd38d7f4280cacac3be0",
                "end": 144
            }
        },
        "pipe": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "commands": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "verbose": {
                    "value": true,
                    "type": "bool"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Dict[str, typing.Any]"
            },
            "docs": "\n        Execute a pipeline of commands, passing output from one to the next.\n        \n        Args:\n            commands: List of commands to execute in sequence\n            verbose: Whether to print command and output information\n            **kwargs: Additional arguments to pass to forward()\n            \n        Returns:\n            Dictionary with the result of the final command\n        ",
            "cost": 1,
            "name": "pipe",
            "source": {
                "start": 145,
                "length": 50,
                "path": "~/commune/commune/modules/dev/src/dev/tool/cmd.py",
                "code": null,
                "hash": "sha256:3b4e6786c99dc75b3e8b90fcecd6cf37a3f8ed54d469bafe25db6ba319500942",
                "end": 195
            }
        }
    },
    "name": "dev.tool.cmd",
    "key": "5GBU83qvjKRt5tUjSCVW31Cj8TpT6hinjiFzSDujzY8decr7",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:f8da66a93464974c5081619e78e61212db75381e43ff61548d90d63cb730e0b0",
    "time": 1746536299.9046881,
    "signature": "0x7ad9da717e5a0259563c77c5a8fb7f125bb632fa259745bebd04f0764b240c11fc142cdf3ed53732c7627dfd50f44f118040d64c1bbf9ff2a76660b6d779678d"
}