{
    "code": {
        "aes.py": "from Crypto import Random\nimport hashlib\nfrom Crypto.Cipher import AES\nimport copy\nimport base64\n\nclass Aes:\n    \"\"\"\n    AES encryption and decryption class.\n    \"\"\"\n    def encrypt(self, data, password):\n        password = self.get_password(password)  \n        data = copy.deepcopy(data)\n        if not isinstance(data, str):\n            data = str(data)\n        data = data + (AES.block_size - len(data) % AES.block_size) * chr(AES.block_size - len(data) % AES.block_size)\n        iv = Random.new().read(AES.block_size)\n        cipher = AES.new(password, AES.MODE_CBC, iv)\n        encrypted_bytes = base64.b64encode(iv + cipher.encrypt(data.encode()))\n        return encrypted_bytes.decode() \n\n    def decrypt(self, data, password:str):  \n        password = self.get_password(password)  \n        data = base64.b64decode(data)\n        iv = data[:AES.block_size]\n        cipher = AES.new(password, AES.MODE_CBC, iv)\n        data =  cipher.decrypt(data[AES.block_size:])\n        data = data[:-ord(data[len(data)-1:])].decode('utf-8')\n        return data\n\n    def get_password(self, password:str):\n        if isinstance(password, str):\n            password = password.encode()\n        # if password is a key, use the key's private key as password\n        return hashlib.sha256(password).digest()\n\n    def test(self,  values = [10, 'fam', 'hello world'], password='1234'):\n        if isinstance(crypto_type, list):\n            return [self.test_encryption(values=values, crypto_type=k) for k in crypto_type]\n        for value in values:\n            value = str(value)\n            key = Key(crypto_type=crypto_type)\n            enc = key.encrypt(value, password)\n            dec = key.decrypt(enc, password)\n            assert dec == value, f'encryption failed, {dec} != {value}'\n        return {'encrypted':enc, 'decrypted': dec, 'crypto_type':key.crypto_type}\n"
    },
    "schema": {
        "decrypt": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "password": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "decrypt",
            "source": {
                "start": 22,
                "length": 8,
                "path": "~/commune/commune/core/key/aes.py",
                "code": null,
                "hash": "sha256:ccb97a6a5c0cd424ad07eed2941f2049861c7e295615441d0267c84b88eb36d2",
                "end": 30
            }
        },
        "encrypt": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "password": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "encrypt",
            "source": {
                "start": 11,
                "length": 10,
                "path": "~/commune/commune/core/key/aes.py",
                "code": null,
                "hash": "sha256:88735b49137a66b62b8ef39be9db6aab5dd712a670988b2254e0b3ac51aafaca",
                "end": 21
            }
        },
        "get_password": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "password": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_password",
            "source": {
                "start": 31,
                "length": 5,
                "path": "~/commune/commune/core/key/aes.py",
                "code": null,
                "hash": "sha256:3f65479a48fb77d96c87b14ba5db8ca3c93503cf7240b6c66c8649eb7570176e",
                "end": 36
            }
        },
        "test": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "values": {
                    "value": [
                        10,
                        "fam",
                        "hello world"
                    ],
                    "type": "list"
                },
                "password": {
                    "value": "1234",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test",
            "source": {
                "start": 37,
                "length": 10,
                "path": "~/commune/commune/core/key/aes.py",
                "code": null,
                "hash": "sha256:f6b63ad4fe2542275fcaf80360bc54c28be7d0ba82955d8f6413ab9db630baf9",
                "end": 47
            }
        }
    },
    "name": "key.aes",
    "key": "5CDVSGwyWoVPF41vKAzNyE2EXN3ywP9Ri1nR3SqQbD2K6vPb",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:d60627e0eb2c3eeff243ec5d6e81ab2ab2f9367ef0e3d97cade1a39556178ae8",
    "time": 1746536280.28752,
    "signature": "0xac2b25e9632c67c8e4c51e9a6b5ab8881c8e34998c4c49bd8738076c8dc5a95c9af2e4b3bbf55d1ad2dd2a1fca313fdeb70b6d2fe3154b36bd980d9e42b3be8b"
}