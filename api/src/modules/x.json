{
    "code": {
        "x.py": "\nimport commune as c\nimport os\nclass x: \n    task = 'make a dank tweet about this for the vibes include the path and score it out of 100 vibes and include'\n    def forward(self, module=None, task=task):\n        code = c.code(module)\n        prompt = {\n            'code': code,\n            'task': task,\n            'gith path': self.git_path(module=module),\n        }\n        return c.chat(prompt, process_input=False)\n\n    def git_path(self, module='module', branch='main'):\n        \"\"\"\n        Get the git path of the module.\n        \"\"\"\n        dirpath =  c.dirpath(module)\n        if dirpath.split('/')[-1] == c.repo_name:\n            dirpath = os.path.dirname(dirpath)\n        git_path = ''\n\n        while len(dirpath.split('/')) > 0:\n            git_config_path = dirpath + '/.git/config'\n            if os.path.exists(git_config_path):\n                git_url = c.get_text(git_config_path).split('url = ')[-1].strip().split('\\n')[0]\n                if git_url.endswith('.git'):\n                    git_url = git_url[:-4]\n                break\n            else:\n                git_path += dirpath.split('/')[-1]\n                dirpath = os.path.dirname(dirpath)\n        # get branch\n        branch = c.get_text(dirpath + '/.git/HEAD').split('/')[-1].strip()\n        return git_url +f'/tree/{branch}/' +git_path"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "module": {
                    "value": null,
                    "type": "NoneType"
                },
                "task": {
                    "value": "make a dank tweet about this for the vibes include the path and score it out of 100 vibes and include",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 6,
                "length": 8,
                "path": "~/commune/commune/modules/x/x.py",
                "code": null,
                "hash": "sha256:192b6e401db3671bf465b762a11c3d109c55ffd753412af72ef3b78ad010a840",
                "end": 14
            }
        },
        "git_path": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "module": {
                    "value": "module",
                    "type": "str"
                },
                "branch": {
                    "value": "main",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Get the git path of the module.\n        ",
            "cost": 1,
            "name": "git_path",
            "source": {
                "start": 15,
                "length": 22,
                "path": "~/commune/commune/modules/x/x.py",
                "code": null,
                "hash": "sha256:1ca51b71bd8b86f7048a417b7d070862b64e5c10d50121f6c1f11634f14b038f",
                "end": 37
            }
        }
    },
    "name": "x",
    "key": "5Fjq5hF4x8tws9c9KW9aR5KeEBr84CzyStvXWjhTS6KEjLYy",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:303b009ed3f704141bd3c85038c2ed07ce089cda2b61e9cb631ee5ec82b42250",
    "time": 1746536276.261651,
    "signature": "0xfcafc295017cc40b97fa8f59a0dac217e6163ff16297786375296dad1fcb8c6f8440e1c50a0df763e2b7527b7003affec206c9d2e4a48d00e25c8bbb3dc87a86"
}