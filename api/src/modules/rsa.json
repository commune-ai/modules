{
    "code": {
        "rsa.py": "import random\nimport math\nimport base64\nfrom typing import Tuple, Union, Optional\n\nclass RSA:\n    \"\"\"\n    A comprehensive RSA implementation class that provides key generation,\n    encryption, decryption, signing, and verification functionality.\n    \"\"\"\n    \n    def __init__(self, path='key',  key_size: int = 2048):\n        \"\"\"\n        Initialize the RSA object with optional key size.\n        \n        Args:\n            key_size: Bit length of the RSA key (default: 2048)\n        \"\"\"\n        self.key_size = key_size\n        self.public_key = None\n        self.private_key = None\n\n\n    def get_path(self, path):\n        return c.storage_path + '/rsa/' + path\n\n    \n    def generate_keys(self) -> Tuple[Tuple, Tuple[int, int]]:\n        \"\"\"\n        Generate a new RSA key pair.\n        \n        Returns:\n            Tuple containing public key (e, n) and private key (d, n)\n        \"\"\"\n        # Generate two large prime numbers\n        p = self._generate_large_prime(self.key_size // 2)\n        q = self._generate_large_prime(self.key_size // 2)\n        \n        # Calculate n = p * q\n        n = p * q\n        \n        # Calculate Euler's totient function: \u03c6(n) = (p-1) * (q-1)\n        phi = (p - 1) * (q - 1)\n        \n        # Choose public exponent e (commonly 65537)\n        e = 65537\n        \n        # Ensure e is coprime to phi\n        while math.gcd(e, phi) != 1:\n            e += 2\n        \n        # Calculate private exponent d (modular multiplicative inverse of e mod phi)\n        d = self._mod_inverse(e, phi)\n        \n        self.public_key = (e, n)\n        self.private_key = (d, n)\n        \n        return self.public_key, self.private_key\n    \n    def encrypt(self, message: Union[str, int, bytes], public_key: Optional[Tuple[int, int]] = None) -> int:\n        \"\"\"\n        Encrypt a message using RSA.\n        \n        Args:\n            message: The message to encrypt (string, integer, or bytes)\n            public_key: Optional public key tuple (e, n). Uses stored key if None.\n            \n        Returns:\n            Encrypted message as an integer\n        \"\"\"\n        if public_key is None:\n            if self.public_key is None:\n                raise ValueError(\"No public key available. Generate keys first or provide a public key.\")\n            public_key = self.public_key\n        \n        e, n = public_key\n        \n        # Convert message to integer if it's a string or bytes\n        if isinstance(message, str):\n            message = int.from_bytes(message.encode(), byteorder='big')\n        elif isinstance(message, bytes):\n            message = int.from_bytes(message, byteorder='big')\n        \n        # Check if message is too large\n        if message >= n:\n            raise ValueError(\"Message is too large for the key size\")\n        \n        # Encrypt: c = m^e mod n\n        ciphertext = pow(message, e, n)\n        return ciphertext\n    \n    def decrypt(self, ciphertext: int, private_key: Optional[Tuple[int, int]] = None) -> int:\n        \"\"\"\n        Decrypt a ciphertext using RSA.\n        \n        Args:\n            ciphertext: The encrypted message (integer)\n            private_key: Optional private key tuple (d, n). Uses stored key if None.\n            \n        Returns:\n            Decrypted message as an integer\n        \"\"\"\n        if private_key is None:\n            if self.private_key is None:\n                raise ValueError(\"No private key available. Generate keys first or provide a private key.\")\n            private_key = self.private_key\n        \n        d, n = private_key\n        \n        # Decrypt: m = c^d mod n\n        message = pow(ciphertext, d, n)\n        return message\n    \n    def decrypt_to_string(self, ciphertext: int, private_key: Optional[Tuple] = None) -> str:\n        \"\"\"\n        Decrypt a ciphertext and convert the result to a string.\n        \n        Args:\n            ciphertext: The encrypted message (integer)\n            private_key: Optional private key tuple (d, n). Uses stored key if None.\n            \n        Returns:\n            Decrypted message as a string\n        \"\"\"\n        decrypted = self.decrypt(ciphertext, private_key)\n        \n        # Convert integer to bytes, then to string\n        byte_length = (decrypted.bit_length() + 7) // 8\n        decrypted_bytes = decrypted.to_bytes(byte_length, byteorder='big')\n        \n        # Remove any null bytes\n        decrypted_bytes = decrypted_bytes.lstrip(b'\\x00')\n        \n        return decrypted_bytes.decode('utf-8', errors='ignore')\n    \n    def sign(self, message: Union[str, int, bytes], private_key: Optional[Tuple] = None) -> int:\n        \"\"\"\n        Sign a message using RSA.\n        \n        Args:\n            message: The message to sign (string, integer, or bytes)\n            private_key: Optional private key tuple (d, n). Uses stored key if None.\n            \n        Returns:\n            Digital signature as an integer\n        \"\"\"\n        if private_key is None:\n            if self.private_key is None:\n                raise ValueError(\"No private key available. Generate keys first or provide a private key.\")\n            private_key = self.private_key\n        \n        d, n = private_key\n        \n        # Convert message to integer if it's a string or bytes\n        if isinstance(message, str):\n            message = int.from_bytes(message.encode(), byteorder='big')\n        elif isinstance(message, bytes):\n            message = int.from_bytes(message, byteorder='big')\n        \n        # Hash the message (simple implementation - in practice, use a proper hash function)\n        hashed = message % n\n        \n        # Sign: s = hash(m)^d mod n\n        signature = pow(hashed, d, n)\n        return signature\n    \n    def verify(self, message: Union, signature: int, \n               public_key: Optional[Tuple] = None) -> bool:\n        \"\"\"\n        Verify a digital signature using RSA.\n        \n        Args:\n            message: The original message (string, integer, or bytes)\n            signature: The digital signature to verify\n            public_key: Optional public key tuple (e, n). Uses stored key if None.\n            \n        Returns:\n            True if signature is valid, False otherwise\n        \"\"\"\n        if public_key is None:\n            if self.public_key is None:\n                raise ValueError(\"No public key available. Generate keys first or provide a public key.\")\n            public_key = self.public_key\n        \n        e, n = public_key\n        \n        # Convert message to integer if it's a string or bytes\n        if isinstance(message, str):\n            message = int.from_bytes(message.encode(), byteorder='big')\n        elif isinstance(message, bytes):\n            message = int.from_bytes(message, byteorder='big')\n        \n        # Hash the message (simple implementation - in practice, use a proper hash function)\n        hashed = message % n\n        \n        # Verify: hash(m) == s^e mod n\n        decrypted_signature = pow(signature, e, n)\n        return decrypted_signature == hashed\n    \n    def export_public_key(self) -> str:\n        \"\"\"\n        Export the public key in a base64-encoded format.\n        \n        Returns:\n            Base64-encoded public key\n        \"\"\"\n        if self.public_key is None:\n            raise ValueError(\"No public key available. Generate keys first.\")\n        \n        e, n = self.public_key\n        key_data = f\"{e}:{n}\".encode()\n        return base64.b64encode(key_data).decode()\n    \n    def export_private_key(self) -> str:\n        \"\"\"\n        Export the private key in a base64-encoded format.\n        \n        Returns:\n            Base64-encoded private key\n        \"\"\"\n        if self.private_key is None:\n            raise ValueError(\"No private key available. Generate keys first.\")\n        \n        d, n = self.private_key\n        key_data = f\"{d}:{n}\".encode()\n        return base64.b64encode(key_data).decode()\n    \n    def import_public_key(self, key_data: str) -> None:\n        \"\"\"\n        Import a public key from a base64-encoded string.\n        \n        Args:\n            key_data: Base64-encoded public key\n        \"\"\"\n        decoded = base64.b64decode(key_data).decode()\n        e, n = map(int, decoded.split(':'))\n        self.public_key = (e, n)\n    \n    def import_private_key(self, key_data: str) -> None:\n        \"\"\"\n        Import a private key from a base64-encoded string.\n        \n        Args:\n            key_data: Base64-encoded private key\n        \"\"\"\n        decoded = base64.b64decode(key_data).decode()\n        d, n = map(int, decoded.split(':'))\n        self.private_key = (d, n)\n    \n    def _is_prime(self, n: int, k: int = 5) -> bool:\n        \"\"\"\n        Miller-Rabin primality test.\n        \n        Args:\n            n: Number to test for primality\n            k: Number of test rounds\n            \n        Returns:\n            True if n is probably prime, False otherwise\n        \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0:\n            return False\n        \n        # Write n as 2^r * d + 1\n        r, d = 0, n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n        \n        # Witness loop\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n        return True\n    \n    def _generate_large_prime(self, bits: int) -> int:\n        \"\"\"\n        Generate a large prime number with the specified bit length.\n        \n        Args:\n            bits: Bit length of the prime number\n            \n        Returns:\n            A prime number\n        \"\"\"\n        while True:\n            # Generate a random odd number with the specified bit length\n            p = random.getrandbits(bits) | (1 << bits - 1) | 1\n            if self._is_prime(p):\n                return p\n    \n    def _extended_gcd(self, a: int, b: int) -> Tuple[int, int, int]:\n        \"\"\"\n        Extended Euclidean Algorithm to find gcd and coefficients.\n        \n        Args:\n            a, b: Integers\n            \n        Returns:\n            Tuple (gcd, x, y) such that ax + by = gcd\n        \"\"\"\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = self._extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n    \n    def _mod_inverse(self, a: int, m: int) -> int:\n        \"\"\"\n        Calculate the modular multiplicative inverse of a modulo m.\n        \n        Args:\n            a: Integer\n            m: Modulus\n            \n        Returns:\n            Integer b such that (a * b) % m == 1\n        \"\"\"\n        gcd, x, y = self._extended_gcd(a, m)\n        if gcd != 1:\n            raise ValueError(\"Modular inverse does not exist\")\n        else:\n            return x % m"
    },
    "schema": {
        "decrypt": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "ciphertext": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "private_key": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'int'>"
            },
            "docs": "\n        Decrypt a ciphertext using RSA.\n        \n        Args:\n            ciphertext: The encrypted message (integer)\n            private_key: Optional private key tuple (d, n). Uses stored key if None.\n            \n        Returns:\n            Decrypted message as an integer\n        ",
            "cost": 1,
            "name": "decrypt",
            "source": {
                "start": 92,
                "length": 21,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:04209d6a59296a5838bd7f4d05e04c9ce1ca831e91b1c6fe14b0f7ae494112cd",
                "end": 113
            }
        },
        "decrypt_to_string": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "ciphertext": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "private_key": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'str'>"
            },
            "docs": "\n        Decrypt a ciphertext and convert the result to a string.\n        \n        Args:\n            ciphertext: The encrypted message (integer)\n            private_key: Optional private key tuple (d, n). Uses stored key if None.\n            \n        Returns:\n            Decrypted message as a string\n        ",
            "cost": 1,
            "name": "decrypt_to_string",
            "source": {
                "start": 114,
                "length": 21,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:59bca8a08add1efebe8b18a62edb3fbfb2091aec9fb88c026296b07c899139b5",
                "end": 135
            }
        },
        "encrypt": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "message": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "public_key": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'int'>"
            },
            "docs": "\n        Encrypt a message using RSA.\n        \n        Args:\n            message: The message to encrypt (string, integer, or bytes)\n            public_key: Optional public key tuple (e, n). Uses stored key if None.\n            \n        Returns:\n            Encrypted message as an integer\n        ",
            "cost": 1,
            "name": "encrypt",
            "source": {
                "start": 60,
                "length": 31,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:5b789a197e8de8e5c2a5ace4210e4ed34043cd9dfb4c118f0adc064637520103",
                "end": 91
            }
        },
        "export_private_key": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'str'>"
            },
            "docs": "\n        Export the private key in a base64-encoded format.\n        \n        Returns:\n            Base64-encoded private key\n        ",
            "cost": 1,
            "name": "export_private_key",
            "source": {
                "start": 214,
                "length": 13,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:d328c689613762648e0e16192e05dfffd1171c9d667e750fbf94e515e3d15058",
                "end": 227
            }
        },
        "export_public_key": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'str'>"
            },
            "docs": "\n        Export the public key in a base64-encoded format.\n        \n        Returns:\n            Base64-encoded public key\n        ",
            "cost": 1,
            "name": "export_public_key",
            "source": {
                "start": 200,
                "length": 13,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:d9bdd04ada06c2711429a8eb31ef965f6578b70efaaf4a8e779652cf1711719d",
                "end": 213
            }
        },
        "generate_keys": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "typing.Tuple[typing.Tuple, typing.Tuple[int, int]]"
            },
            "docs": "\n        Generate a new RSA key pair.\n        \n        Returns:\n            Tuple containing public key (e, n) and private key (d, n)\n        ",
            "cost": 1,
            "name": "generate_keys",
            "source": {
                "start": 28,
                "length": 31,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:bc831f6abf2b85a6b6aec0983fbdbfa2c35236b346d8f9709ec31a2922079c73",
                "end": 59
            }
        },
        "get_path": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "path": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_path",
            "source": {
                "start": 24,
                "length": 2,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:27bfb7d2f507f03045380e2d2eb3518765dc38c2951ee1c82b166861cfa7c35d",
                "end": 26
            }
        },
        "import_private_key": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "key_data": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Import a private key from a base64-encoded string.\n        \n        Args:\n            key_data: Base64-encoded private key\n        ",
            "cost": 1,
            "name": "import_private_key",
            "source": {
                "start": 239,
                "length": 10,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:beec22fd12f28867b160a91d84d5f1c64a86c4ba4adf7b19c790c410d0c4c6b4",
                "end": 249
            }
        },
        "import_public_key": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "key_data": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Import a public key from a base64-encoded string.\n        \n        Args:\n            key_data: Base64-encoded public key\n        ",
            "cost": 1,
            "name": "import_public_key",
            "source": {
                "start": 228,
                "length": 10,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:1a81c99fd279ef0cb0d7ec55d66b01c604c62b6a519f2857204344f677826dd4",
                "end": 238
            }
        },
        "sign": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "message": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "private_key": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'int'>"
            },
            "docs": "\n        Sign a message using RSA.\n        \n        Args:\n            message: The message to sign (string, integer, or bytes)\n            private_key: Optional private key tuple (d, n). Uses stored key if None.\n            \n        Returns:\n            Digital signature as an integer\n        ",
            "cost": 1,
            "name": "sign",
            "source": {
                "start": 136,
                "length": 30,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:f9ce25cf33cc0d34a547c932d2309e3ca020a6ff93c85699fdf09167d4378f4d",
                "end": 166
            }
        },
        "verify": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "message": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "signature": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "public_key": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'bool'>"
            },
            "docs": "\n        Verify a digital signature using RSA.\n        \n        Args:\n            message: The original message (string, integer, or bytes)\n            signature: The digital signature to verify\n            public_key: Optional public key tuple (e, n). Uses stored key if None.\n            \n        Returns:\n            True if signature is valid, False otherwise\n        ",
            "cost": 1,
            "name": "verify",
            "source": {
                "start": 167,
                "length": 32,
                "path": "~/commune/commune/modules/rsa/rsa.py",
                "code": null,
                "hash": "sha256:df3b767d28f31785f2aa8f281ebfe8fec5171456fd061fe426ee6261258277ab",
                "end": 199
            }
        }
    },
    "name": "rsa",
    "key": "5G3jY1WTbwAgJAopNRaWk7r7GSogf3ZcdeotdShVJhFfnYdX",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:046f89a53d9a1ab900ffc462e5af27fe27e69c73c317a7df4c5c0545bbf9a6d5",
    "time": 1746536232.883899,
    "signature": "0x4a9e78ecbf44d94eecdd9db1abca4b700dec10554b800f003e65c0536ee0b8154061932abac46622ab33b2ea4d015c3634e16ddbcba087040bf830fc1997248c"
}