{
    "code": {
        "serializer.py": "import commune as c\nimport json\nimport os\nfrom .utils import *\n\nclass Serializer:\n\n    list_types = [list, set, tuple] # shit that you can turn into lists for json\n    json_serializable_types = [int, float, str, bool, type(None)]\n\n    def serialize(self,x:dict, copy_value = True):\n        if copy_value:\n            x = c.copy(x)\n        if isinstance(x, dict):\n            data  = {}\n            for k,v in x.items():\n                data[k] = self.serialize(v)\n            return data\n        elif type(x) in self.list_types:\n            data_type = type(x)\n            data = []\n            for v in x:\n                data.append(self.serialize(v))\n            return data\n        elif type(x) in self.json_serializable_types:\n            return x\n        else:\n            data_type = get_data_type_string(x)\n            serializer = self.get_serializer(data_type)\n            result = {'data':  serializer.serialize(x), \n                            'data_type': serializer.date_type,  \n                            'serialized': True}\n            return result\n\n    def deserialize(self, x) -> object:\n        \"\"\"Serializes a torch object to DataBlock wire format.\n        \"\"\"\n        if isinstance(x, str):\n            if x.startswith('{') or x.startswith('['):\n                x = str2dict(x)\n            else:\n                if c.is_int(x):\n                    x = int(x)\n                elif c.is_float(x):\n                    x = float(x)\n                return x\n           \n        if self.is_serialized(x):\n            serializer = self.get_serializer(x['data_type'])\n            return serializer.deserialize(x['data'])\n        if isinstance(x, dict):\n            data  = {}\n            for k,v in x.items():\n                data[k] = self.deserialize(v)\n            return data\n        elif type(x) in self.list_types:\n            data_type = type(x)\n            data = []\n            for v in x:\n                data.append(self.deserialize(v))\n            return data_type(data)\n        return x\n    \n    \n    def is_serialized(self, data):\n        if isinstance(data, dict) and data.get('serialized', False) and \\\n                    'data' in data and 'data_type' in data:\n            return True\n        else:\n            return False\n\n    def serializer_map(self):\n        return {p.split('.')[-2]: c.obj(p)() for p in c.objs(os.path.dirname(__file__) + '/types')}\n\n    def types(self):\n        return list(self.serializer_map().keys())\n    \n    def get_serializer(self, data_type):\n        serializer_map = self.serializer_map()\n        if data_type in serializer_map:\n            serializer = serializer_map[data_type]\n            if not hasattr(serializer, 'date_type'):\n                setattr(serializer, 'date_type', data_type)\n                serializer_map[data_type] = serializer\n        else:\n            raise TypeError(f'Type Not supported for serializeation ({data_type}) with ')\n        return serializer\n\n    def test(self):\n        import time\n        import numpy as np\n        import torch\n        self = c.module('serializer')()\n        data_list = [\n            torch.ones(1000),\n            torch.zeros(1000),\n            torch.rand(1000), \n            [1,2,3,4,5],\n            {'a':1, 'b':2, 'c':3},\n            {'a': torch.ones(1000), 'b': torch.zeros(1000), 'c': torch.rand(1000)},\n            [1,2,3,4,5, torch.ones(10), np.ones(10)],\n            (1,2, c.df([{'name': 'joe', 'fam': 1}]), 3.0),\n            'hello world',\n            c.df([{'name': 'joe', 'fam': 1}]),\n            1,\n            1.0,\n            True,\n            False,\n            None\n        ]\n        for data in data_list:\n            t1 = time.time()\n            ser_data = self.serialize(data)\n            des_data = self.deserialize(ser_data)\n            des_ser_data = self.serialize(des_data)\n            t2 = time.time()\n            duration = t2 - t1\n            emoji = '\u2705' if str(des_ser_data) == str(ser_data) else '\u274c'\n\n        return {'msg': 'PASSED test_serialize_deserialize'}\n",
        "types/bytes.py": "\nclass BytesSerializer:\n\n    def serialize(self, data: dict) -> bytes:\n        return data.hex()\n        \n    def deserialize(self, data: bytes) -> 'DataBlock':\n        if isinstance(data, str):\n            data = bytes.fromhex(data)\n        return data\n",
        "types/munch.py": "import json\n\nclass MunchSerializer:\n\n    def serialize(self, data: dict) -> str:\n        return  json.dumps(self.munch2dict(data))\n\n    def deserialize(self, data: bytes) -> 'Munch':\n        return self.dict2munch(self.str2dict(data))\n\n    \n    def str2dict(self, data:str) -> bytes:\n        if isinstance(data, bytes):\n            data = data.decode('utf-8')\n        if isinstance(data, str):\n            data = json.loads(data)\n        return data\n\n    @classmethod\n    def dict2munch(cls, x:dict, recursive:bool=True)-> 'Munch':\n        from munch import Munch\n        '''\n        Turn dictionary into Munch\n        '''\n        if isinstance(x, dict):\n            for k,v in x.items():\n                if isinstance(v, dict) and recursive:\n                    x[k] = cls.dict2munch(v)\n            x = Munch(x)\n        return x \n\n    @classmethod\n    def munch2dict(cls, x:'Munch', recursive:bool=True)-> dict:\n        from munch import Munch\n        '''\n        Turn munch object  into dictionary\n        '''\n        if isinstance(x, Munch):\n            x = dict(x)\n            for k,v in x.items():\n                if isinstance(v, Munch) and recursive:\n                    x[k] = cls.munch2dict(v)\n        return x \n        \n\n    def dict2str(self, data:dict) -> bytes:\n        return\n\n",
        "types/numpy.py": "class NumpySerializer:\n    \n    def serialize(self, data: 'np.ndarray') -> 'np.ndarray':     \n        return  self.numpy2bytes(data).hex()\n\n    def deserialize(self, data: bytes) -> 'np.ndarray':     \n        if isinstance(data, str):\n            data = bytes.fromhex(data)\n        return self.bytes2numpy(data)\n\n    def bytes2numpy(self, data:bytes) -> 'np.ndarray':\n        import msgpack_numpy\n        import msgpack\n        output = msgpack.unpackb(data, object_hook=msgpack_numpy.decode)\n        return output\n    \n    def numpy2bytes(self, data:'np.ndarray')-> bytes:\n        import msgpack_numpy\n        import msgpack\n        output = msgpack.packb(data, default=msgpack_numpy.encode)\n        return output\n    \n    @classmethod\n    def bytes2str(cls, x, **kwargs):\n        return x.hex()\n    \n    @classmethod\n    def str2bytes(cls, data: str, mode: str = 'hex') -> bytes:\n        if mode in ['utf-8']:\n            return bytes(data, mode)\n        elif mode in ['hex']:\n            return bytes.fromhex(data)\n    ",
        "types/pandas.py": "import json\nimport pandas as pd\n\nclass PandasSerializer:\n\n    def serialize(self, data: pd.DataFrame) -> 'DataBlock':\n        data = data.to_json()\n        if isinstance(data, bytes):\n            data = data.decode('utf-8')\n        return data\n\n    def deserialize(self, data: bytes) -> pd.DataFrame:\n        data = pd.DataFrame.from_dict(json.loads(data))\n        print(data)\n        return data\n    ",
        "types/torch.py": "\nclass TorchSerializer:\n    def deserialize(self, data: dict) -> 'torch.Tensor':\n        from safetensors.torch import load\n        if isinstance(data, str):\n            data = self.str2bytes(data)\n        data = load(data)\n        return data['data']\n\n    def serialize(self, data: 'torch.Tensor') -> 'DataBlock':     \n        from safetensors.torch import save\n        return save({'data':data}).hex()\n    \n    def str2bytes(self, data: str, mode: str = 'hex') -> bytes:\n        if mode in ['utf-8']:\n            return bytes(data, mode)\n        elif mode in ['hex']:\n            return bytes.fromhex(data)\n  ",
        "utils.py": "def dict2bytes( data:dict) -> bytes:\n    import msgpack\n    data_json_str = json.dumps(data)\n    data_json_bytes = msgpack.packb(data_json_str)\n    return data_json_bytes\n\ndef str2dict( data:str) -> bytes:\n    if isinstance(data, bytes):\n        data = data.decode('utf-8')\n    if isinstance(data, str):\n        data = json.loads(data)\n    return data\n\n\ndef get_data_type_string( x):\n    # GET THE TYPE OF THE VALUE\n    data_type = str(type(x)).split(\"'\")[1].lower()\n    if 'munch' in data_type:\n        data_type = 'munch'\n    if 'tensor' in data_type or 'torch' in data_type:\n        data_type = 'torch'\n    if 'ndarray' in data_type:\n        data_type = 'numpy'\n    if  'dataframe' in data_type:\n        data_type = 'pandas'\n\n    return data_type\n\n\ndef str2bytes(self,  data: str, mode: str = 'hex') -> bytes:\n    if mode in ['utf-8']:\n        return bytes(data, mode)\n    elif mode in ['hex']:\n        return bytes.fromhex(data)\n    else:\n        raise Exception(f'{mode} not supported')"
    },
    "schema": {
        "deserialize": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "x": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'object'>"
            },
            "docs": "Serializes a torch object to DataBlock wire format.\n        ",
            "cost": 1,
            "name": "deserialize",
            "source": {
                "start": 35,
                "length": 28,
                "path": "~/commune/commune/modules/serializer/serializer.py",
                "code": null,
                "hash": "sha256:8017b9bf07c7874037332c77d894412e61a64d11d3462fafb91a3f211229699f",
                "end": 63
            }
        },
        "get_serializer": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data_type": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_serializer",
            "source": {
                "start": 78,
                "length": 10,
                "path": "~/commune/commune/modules/serializer/serializer.py",
                "code": null,
                "hash": "sha256:411466cefd005071ea9ec0684e19dea27ac1fc16ac2961e96ed7e6c533b59ae9",
                "end": 88
            }
        },
        "is_serialized": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "data": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "is_serialized",
            "source": {
                "start": 65,
                "length": 6,
                "path": "~/commune/commune/modules/serializer/serializer.py",
                "code": null,
                "hash": "sha256:45e49e1515b21b775df12bbef460a585824e662ef2afbfb1f9d4a9a7f189933f",
                "end": 71
            }
        },
        "serialize": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "x": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "copy_value": {
                    "value": true,
                    "type": "bool"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "serialize",
            "source": {
                "start": 11,
                "length": 23,
                "path": "~/commune/commune/modules/serializer/serializer.py",
                "code": null,
                "hash": "sha256:5c99136479c6915a52c969e2cacd33d7e60c0bfb7edf82f8dd83f01a590907b8",
                "end": 34
            }
        },
        "serializer_map": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "serializer_map",
            "source": {
                "start": 72,
                "length": 2,
                "path": "~/commune/commune/modules/serializer/serializer.py",
                "code": null,
                "hash": "sha256:8712ed5d5b1fd3a3cf0f36e5b605ce9373d2ddd0cca22cddc95a855d81b88130",
                "end": 74
            }
        },
        "test": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "test",
            "source": {
                "start": 89,
                "length": 32,
                "path": "~/commune/commune/modules/serializer/serializer.py",
                "code": null,
                "hash": "sha256:d498b374fdb2d9dce7ceee41dfc94634bdcfce72a09af52b3215cf297b9eaab5",
                "end": 121
            }
        },
        "types": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "types",
            "source": {
                "start": 75,
                "length": 2,
                "path": "~/commune/commune/modules/serializer/serializer.py",
                "code": null,
                "hash": "sha256:481e257bcd55c93dcf24e0d06a5b522413c376bb673d4c5ed95a2feb3778f4f6",
                "end": 77
            }
        }
    },
    "name": "serializer",
    "key": "5CZkJpBDtutgdN1gACTCBJy6wGDBSx98r3pRihC52KiggcAo",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:10f9e009f5eab48cc2e32f5c8d74a7a108a5ff5b2a0cf1b515a60b0ee98a11b0",
    "time": 1746536230.633568,
    "signature": "0x98ce24aa91bdd16dd6cc38aee24bf9bc22b542498500cd6cf17cd1dfdcef6d245722697fff99b362ecbae0373aef42408b12b0a3789e894e13d7943e037f2c83"
}