{
    "code": {
        "agent/verifyfn.py": "\n\n\nimport os\nimport json\nimport commune as c\n\nclass VerifyFn:\n    def forward(self, fn='module/ls'):\n            code = c.code(fn)\n            prompt = {\n                'goal': 'make the params from the following  and respond in JSON format as kwargs to the function and make sure the params are legit',\n                'code': code, \n                'output_format': '<JSON_START>DICT(params:dict)</JSON_END>',\n            }\n            response =  c.ask(prompt, preprocess=False)\n            output = ''\n            for ch in response:\n                print(ch, end='')\n                output += ch\n                if '</JSON_END>' in output:\n                    break\n            params_str = output.split('<JSON_START>')[1].split('</JSON_END>')[0].strip()\n            params = json.loads(params_str)['params']\n\n            result =  c.fn(fn)(**params)\n\n            ## SCORE THE RESULT\n            prompt = {\n                'goal': '''score the code given the result, params \n                and code out of 100 if the result is indeed the result of the code\n                make sure to only respond in the output format''',\n                'code': code, \n                'result': result,\n                'params': params,\n                'output_format': '<JSON_START>DICT(score:int, feedback:str, suggestions=List[dict(improvement:str, delta:int)]</JSON_END>',\n            }\n\n            response =  c.ask(prompt, preprocess=False)\n\n            output = ''\n            for ch in response:\n                print(ch, end='')\n                output += ch\n                if '</JSON_END>' in output:\n                    break\n                \n            return json.loads(output.split('<JSON_START>')[1].split('</JSON_END>')[0].strip())\n"
    },
    "schema": {
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "fn": {
                    "value": "module/ls",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 9,
                "length": 40,
                "path": "~/commune/commune/modules/agent/agent/verifyfn.py",
                "code": null,
                "hash": "sha256:bfa4b676c523ead898b5d58d3696cfc09c5aea3e27bccf67a5b8efdf1692da1c",
                "end": 49
            }
        }
    },
    "name": "agent.verifyfn",
    "key": "5D8EGf9fjfEVSrSDA6H8dA7kwfhBMFAvsnQM3duBivSe1TZ4",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:d31ebce0aa3e23a377238584745ed743ef7ad2d54fb1bf01c723ec194c4d15c9",
    "time": 1746536202.503575,
    "signature": "0xcc2ad5a9135f51ae7d979a7bc1c5b76a969f2a7a21b4a49fe9adde35a3ca9d4639aea555bb98ca84843d6a7012bb21849755e1cd3cc59c377d4169b61ad6fc8f"
}