{
    "code": {
        "client.py": "\n\nfrom typing import *\nimport asyncio\nimport json\nimport requests\nimport os\nimport commune as c\n\nclass Client:\n    def __init__( self,  \n                 url : str = 'module',  \n                 key : Optional[str]= None,  \n                 network: Optional[bool] = 'local', \n                 auth = 'auth.jwt',\n                 mode='http',\n                 **kwargs):\n        self.auth = c.module(auth)()\n        self.key  = c.get_key(key)\n        self.url = url\n\n    def forward(self, \n                fn  = 'info', \n                params: Optional[Union[list, dict]] = None, # if you want to pass params as a list or dict\n                # if you want to pass positional arguments to the function, use args \n                args : Optional[list] = [], \n                kwargs : Optional[dict] = {},      \n                ## adduitional parameters\n                timeout:int=2,  # the timeout for the request\n                key : str = None,  # the key to use for the request\n                mode: str  = 'http', # the mode of the request\n                stream: bool = False, # if the response is a stream\n                **extra_kwargs \n    ):\n        if '/' in str(fn):\n            url, fn = '/'.join(fn.split('/')[:-1]), fn.split('/')[-1]\n        else :\n            url = self.url\n            fn = str(fn)\n        url = self.get_url(url, mode=mode)\n        key = self.get_key(key) # step 1: get the key\n        params = self.get_params(params=params, args=args, kwargs=kwargs, extra_kwargs=extra_kwargs) # step 3: get the params\n        headers = self.auth.get_headers(params, key=key) # step 4: get the headers\n        with requests.Session() as conn:\n            response = conn.post( f\"{url}/{fn}/\", json=params,  headers=headers, timeout=timeout, stream=stream)\n        ## handle the response\n        if response.status_code != 200:\n            raise Exception(response.text)\n        if 'text/event-stream' in response.headers.get('Content-Type', ''):\n            result = self.stream(response)\n        else:\n            if 'application/json' in response.headers.get('Content-Type', ''):\n                result = response.json()\n            elif 'text/plain' in response.headers.get('Content-Type', ''):\n                result = response.text\n            else:\n                result = response.content\n                if response.status_code != 200:\n                    raise Exception(result)\n        return result\n    \n    def get_key(self,key=None):\n        if key == None:\n            return self.key\n        if isinstance(key, str):\n            key = c.get_key(key)\n        return key\n\n    def get_params(self, params=None, args=[], kwargs={}, extra_kwargs={}):\n        if isinstance(params, dict) and 'args' in params and 'kwargs' in params:\n            return params\n        params = params or {}\n        args = args or []\n        kwargs = kwargs or {}\n        kwargs.update(extra_kwargs)\n        if params:\n            if isinstance(params, dict):\n                kwargs = {**kwargs, **params}\n            elif isinstance(params, list):\n                args = params\n            else:\n                raise Exception(f'Invalid params {params}')\n        params = {\"args\": args, \"kwargs\": kwargs}\n        return params\n\n\n    def get_url(self, url, mode='http'):\n        if c.is_url(url):\n            url = url\n        elif c.is_int(url):\n            url = f'0.0.0.0:{url}'\n        else:\n            url = c.namespace().get(str(url), url)\n        url = url if url.startswith(mode) else f'{mode}://{url}'\n        return url\n\n\n    @classmethod\n    def call(cls, \n                fn:str = 'module/info',\n                *args,\n                params = None,\n                module : str = None,\n                network:str = 'local',\n                key: Optional[str] = None, # defaults to module key (c.default_key)\n                timeout=40,\n                **kwargs) -> None:\n        fn = str(fn)\n        if '/' in fn and not '//' in fn:\n            module, fn = '.'.join(fn.split('/')[:-1]), fn.split('/')[-1]\n        else:\n            module, fn = fn, 'info'\n        kwargs.update(params or {}) \n        return cls(url=module, network=network).forward(fn=fn, \n                                                            params={'args': args, 'kwargs': kwargs},\n                                                            timeout=timeout, \n                                                            key=key)\n\n    def stream(self, response):\n        def process_stream_line(line , stream_prefix = 'data: '):\n            event_data = line.decode('utf-8')\n            if event_data.startswith(stream_prefix):\n                event_data = event_data[len(stream_prefix):] \n            if event_data == \"\": # skip empty lines if the event data is empty\n                return ''\n            if isinstance(event_data, str):\n                if event_data.startswith('{') and event_data.endswith('}') and 'data' in event_data:\n                    event_data = json.loads(event_data)['data']\n            return event_data\n        try:\n            for chunk in response.iter_lines():\n                yield process_stream_line(chunk)\n        except Exception as e:\n            yield c.detailed_error(e)\n\n    def is_url(self,  url:str) -> bool:\n        if not isinstance(url, str):\n            return False\n        if '://' in url:\n            return True\n        conds = []\n        conds.append(isinstance(url, str))\n        conds.append(':' in url)\n        conds.append(c.is_int(url.split(':')[-1]))\n        return all(conds)\n\n    def client(self, module:str = 'module', network : str = 'local', virtual:bool = True, **kwargs):\n        \"\"\"\n        Create a client instance.\n        \"\"\"\n        class ClientVirtual:\n            def __init__(self, client):\n                self.client = client\n            def remote_call(self, *args, remote_fn, timeout:int=10, key=None, **kwargs):\n                return self.client.forward(fn=remote_fn, args=args, kwargs=kwargs, timeout=timeout, key=key)\n            def __getattr__(self, key):\n                if key in [ 'client', 'remote_call'] :\n                    return getattr(self, key)\n                else:\n                    return lambda *args, **kwargs : self.remote_call(*args, remote_fn=key, **kwargs)\n        client = Client(url=module)\n        return ClientVirtual(client) if virtual else client\n\n    def connect(self, module:str, **kwargs):\n        \"\"\"\n        Connect to a module and return a client instance.\n        \"\"\"\n        return self.client(module, **kwargs)"
    },
    "schema": {
        "call": {
            "input": {
                "fn": {
                    "value": "module/info",
                    "type": "str"
                },
                "args": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "params": {
                    "value": null,
                    "type": "NoneType"
                },
                "module": {
                    "value": null,
                    "type": "NoneType"
                },
                "network": {
                    "value": "local",
                    "type": "str"
                },
                "key": {
                    "value": null,
                    "type": "NoneType"
                },
                "timeout": {
                    "value": 40,
                    "type": "int"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "call",
            "source": {
                "start": 98,
                "length": 20,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:a40dc49b3a2edf0b910a57168a6e25a07a55f5f19e73dfd1a08a1f8e0bdca7d2",
                "end": 118
            }
        },
        "client": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "module": {
                    "value": "module",
                    "type": "str"
                },
                "network": {
                    "value": "local",
                    "type": "str"
                },
                "virtual": {
                    "value": true,
                    "type": "bool"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Create a client instance.\n        ",
            "cost": 1,
            "name": "client",
            "source": {
                "start": 147,
                "length": 16,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:aca6d81efefae01806dfc1ebfcea1e0c4f51d6686c0022100ff0b0052aac141e",
                "end": 163
            }
        },
        "connect": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "module": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": "\n        Connect to a module and return a client instance.\n        ",
            "cost": 1,
            "name": "connect",
            "source": {
                "start": 164,
                "length": 5,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:0656ca0f4b6ac954ce1373909415d39d4f472efd38c891a2663be1314a44191a",
                "end": 169
            }
        },
        "forward": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "fn": {
                    "value": "info",
                    "type": "str"
                },
                "params": {
                    "value": null,
                    "type": "NoneType"
                },
                "args": {
                    "value": [],
                    "type": "list"
                },
                "kwargs": {
                    "value": {},
                    "type": "dict"
                },
                "timeout": {
                    "value": 2,
                    "type": "int"
                },
                "key": {
                    "value": null,
                    "type": "NoneType"
                },
                "mode": {
                    "value": "http",
                    "type": "str"
                },
                "stream": {
                    "value": false,
                    "type": "bool"
                },
                "extra_kwargs": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "forward",
            "source": {
                "start": 22,
                "length": 39,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:25926f0f224683643ad2c88b08a6ff08961729b8272cf73f2b04e3eca504f9b1",
                "end": 61
            }
        },
        "get_key": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "key": {
                    "value": null,
                    "type": "NoneType"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_key",
            "source": {
                "start": 62,
                "length": 6,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:8304b1616f9e9ad4f6634ad17f3c4efd1e399184b02ea27301349b2fbbc79c48",
                "end": 68
            }
        },
        "get_params": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "params": {
                    "value": null,
                    "type": "NoneType"
                },
                "args": {
                    "value": [],
                    "type": "list"
                },
                "kwargs": {
                    "value": {},
                    "type": "dict"
                },
                "extra_kwargs": {
                    "value": {},
                    "type": "dict"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_params",
            "source": {
                "start": 69,
                "length": 16,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:ab29044d44abc2ff08983223c6774cd862982a0a18a6582393f697fbff179ac3",
                "end": 85
            }
        },
        "get_url": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "url": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "mode": {
                    "value": "http",
                    "type": "str"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "get_url",
            "source": {
                "start": 87,
                "length": 9,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:7b81a6be500facde5043ea3f79a09c9a2dbff15a4db7d9d90e4012c39bd87fa5",
                "end": 96
            }
        },
        "is_url": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "url": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "<class 'bool'>"
            },
            "docs": null,
            "cost": 1,
            "name": "is_url",
            "source": {
                "start": 136,
                "length": 10,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:1c1d800195b5b45ee10dfe0952e0affa12a1c69b682ff36e3e4e508bd6223d96",
                "end": 146
            }
        },
        "stream": {
            "input": {
                "self": {
                    "value": "_empty",
                    "type": "_empty"
                },
                "response": {
                    "value": "_empty",
                    "type": "_empty"
                }
            },
            "output": {
                "value": null,
                "type": "None"
            },
            "docs": null,
            "cost": 1,
            "name": "stream",
            "source": {
                "start": 119,
                "length": 16,
                "path": "~/commune/commune/core/server/client.py",
                "code": null,
                "hash": "sha256:807497a59acb49888ddebe554e1f13e63fa2139e141bbdcfeebecbdcb569d1a5",
                "end": 135
            }
        }
    },
    "name": "server.client",
    "key": "5HTrh17ZzWhXunjWU3XN9eG9B2L4g8DEx7nEv2kyR33bYByX",
    "founder": "5GKvu9qC8VPjXnofUxZP6zxTmvzTBCY1vpJAkh6gWF8YxPKy",
    "cid": "sha256:7d637b507fe71b23806bf87043e5dd23d415f335920a2ad5b6c90daa657a4858",
    "time": 1746536235.86032,
    "signature": "0x42576e7678c0ee8b00eced1e41f4881dbc6f0ad131722ed79ad8df01b17e8a66fcb45ca2df64d3db6c328f6b9f4920620ca09e42f4c64dcee6163b7787224b83"
}